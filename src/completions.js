export default [
    ["abline(", "abline : function (a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL, coef = NULL, untf = FALSE, ...)  "],
    ["arrows(", "arrows : function (x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30, code = 2, col = par('fg'), lty = par('lty'), lwd = par('lwd'), ...)  "],
    ["assocplot(", "assocplot : function (x, col = c('black', 'red'), space = 0.3, main = NULL, xlab = NULL, ylab = NULL)  "],
    ["axis(", "axis : function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, pos = NA, outer = FALSE, font = NA, lty = 'solid', lwd = 1, lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, padj = NA, ...)  "],
    ["Axis(", "Axis : function (x = NULL, at = NULL, ..., side, labels = NULL)  "],
    ["axis.Date(", "axis.Date : function (side, x, at, format, labels = TRUE, ...)  "],
    ["axis.POSIXct(", "axis.POSIXct : function (side, x, at, format, labels = TRUE, ...)  "],
    ["axTicks(", "axTicks : function (side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL)  "],
    ["barplot(", "barplot : function (height, ...)  "],
    ["barplot.default(", "barplot.default : function (height, width = 1, space = NULL, names.arg = NULL, legend.text = NULL, beside = FALSE, horiz = FALSE, density = NULL, angle = 45, col = NULL, border = par('fg'), main = NULL, sub = NULL, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL, xpd = TRUE, log = '', axes = TRUE, axisnames = TRUE, cex.axis = par('cex.axis'), cex.names = par('cex.axis'), inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0, add = FALSE, args.legend = NULL, ...)  "],
    ["box(", "box : function (which = 'plot', lty = 'solid', ...)  "],
    ["boxplot(", "boxplot : function (x, ...)  "],
    ["boxplot.default(", "boxplot.default : function (x, ..., range = 1.5, width = NULL, varwidth = FALSE, notch = FALSE, outline = TRUE, names, plot = TRUE, border = par('fg'), col = NULL, log = '', pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), horizontal = FALSE, add = FALSE, at = NULL)  "],
    ["boxplot.matrix(", "boxplot.matrix : function (x, use.cols = TRUE, ...)  "],
    ["bxp(", "bxp : function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = '', border = par('fg'), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...)  "],
    ["cdplot(", "cdplot : function (x, ...)  "],
    ["clip(", "clip : function (x1, x2, y1, y2)  "],
    ["close.screen(", "close.screen : function (n, all.screens = FALSE)  "],
    ["co.intervals(", "co.intervals : function (x, number = 6, overlap = 0.5)  "],
    ["contour(", "contour : function (x, ...)  "],
    ["contour.default(", "contour.default : function (x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, length.out = ncol(z)), z, nlevels = 10, levels = pretty(zlim, nlevels), labels = NULL, xlim = range(x, finite = TRUE), ylim = range(y, finite = TRUE), zlim = range(z, finite = TRUE), labcex = 0.6, drawlabels = TRUE, method = 'flattest', vfont, axes = TRUE, frame.plot = axes, col = par('fg'), lty = par('lty'), lwd = par('lwd'), add = FALSE, ...)  "],
    ["coplot : function (formula, data, given.values, panel = points, rows, columns, show.given = TRUE, col = par('fg'), pch = par('pch'), bar.bg = c(num = gray(0.8), fac = gray(0.95)), xlab = c(x.name, paste('Given :', a.name)), ylab = c(y.name, paste('Given(", "coplot : function (formula, data, given.values, panel = points, rows, columns, show.given = TRUE, col = par('fg'), pch = par('pch'), bar.bg = c(num = gray(0.8), fac = gray(0.95)), xlab = c(x.name, paste('Given :', a.name)), ylab = c(y.name, paste('Given :', b.name)), subscripts = FALSE, axlabels = function(f) abbreviate(levels(f)), number = 6, overlap = 0.5, xlim, ylim, ...)  "],
    ["curve(", "curve : function (expr, from = NULL, to = NULL, n = 101, add = FALSE, type = 'l', xname = 'x', xlab = xname, ylab = NULL, log = NULL, xlim = NULL, ...)  "],
    ["dotchart(", "dotchart : function (x, labels = NULL, groups = NULL, gdata = NULL, cex = par('cex'), pt.cex = cex, pch = 21, gpch = 21, bg = par('bg'), color = par('fg'), gcolor = par('fg'), lcolor = 'gray', xlim = range(x[is.finite(x)]), main = NULL, xlab = NULL, ylab = NULL, ...)  "],
    ["erase.screen(", "erase.screen : function (n = cur.screen)  "],
    ["filled.contour(", "filled.contour : function (x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, length.out = ncol(z)), z, xlim = range(x, finite = TRUE), ylim = range(y, finite = TRUE), zlim = range(z, finite = TRUE), levels = pretty(zlim, nlevels), nlevels = 20, color.palette = cm.colors, col = color.palette(length(levels) - 1), plot.title, plot.axes, key.title, key.axes, asp = NA, xaxs = 'i', yaxs = 'i', las = 1, axes = TRUE, frame.plot = axes, ...)  "],
    ["fourfoldplot(", "fourfoldplot : function (x, color = c('#99CCFF', '#6699CC'), conf.level = 0.95, std = c('margins', 'ind.max', 'all.max'), margin = c(1, 2), space = 0.2, main = NULL, mfrow = NULL, mfcol = NULL)  "],
    ["frame(", "frame : function ()  "],
    ["grconvertX(", "grconvertX : function (x, from = 'user', to = 'user')  "],
    ["grconvertY(", "grconvertY : function (y, from = 'user', to = 'user')  "],
    ["grid(", "grid : function (nx = NULL, ny = nx, col = 'lightgray', lty = 'dotted', lwd = par('lwd'), equilogs = TRUE)  "],
    ["hist(", "hist : function (x, ...)  "],
    ["hist.default(", "hist.default : function (x, breaks = 'Sturges', freq = NULL, probability = !freq, include.lowest = TRUE, right = TRUE, density = NULL, angle = 45, col = NULL, border = NULL, main = paste('Histogram of', xname), xlim = range(breaks), ylim = NULL, xlab = xname, ylab, axes = TRUE, plot = TRUE, labels = FALSE, nclass = NULL, warn.unused = TRUE, ...)  "],
    ["identify(", "identify : function (x, ...)  "],
    ["image(", "image : function (x, ...)  "],
    ["image.default(", "image.default : function (x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, length.out = ncol(z)), z, zlim = range(z[is.finite(z)]), xlim = range(x), ylim = range(y), col = heat.colors(12), add = FALSE, xaxs = 'i', yaxs = 'i', xlab, ylab, breaks, oldstyle = FALSE, useRaster, ...)  "],
    ["layout(", "layout : function (mat, widths = rep.int(1, ncol(mat)), heights = rep.int(1, nrow(mat)), respect = FALSE)  "],
    ["layout.show(", "layout.show : function (n = 1)  "],
    ["lcm(", "lcm : function (x)  "],
    ["legend(", "legend : function (x, y = NULL, legend, fill = NULL, col = par('col'), border = 'black', lty, lwd, pch, angle = 45, density = NULL, bty = 'o', bg = par('bg'), box.lwd = par('lwd'), box.lty = par('lty'), box.col = par('fg'), pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd, xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1, adj = c(0, 0.5), text.width = NULL, text.col = par('col'), text.font = NULL, merge = do.lines && has.pch, trace = FALSE, plot = TRUE, ncol = 1, horiz = FALSE, title = NULL, inset = 0, xpd, "],
    ["(", "    title.col = text.col, title.adj = 0.5, seg.len = 2)  "],
    ["lines(", "lines : function (x, ...)  "],
    ["lines.default(", "lines.default : function (x, y = NULL, type = 'l', ...)  "],
    ["locator(", "locator : function (n = 512, type = 'n', ...)  "],
    ["matlines(", "matlines : function (x, y, type = 'l', lty = 1:5, lwd = 1, pch = NULL, col = 1:6, ...)  "],
    ["matplot(", "matplot : function (x, y, type = 'p', lty = 1:5, lwd = 1, lend = par('lend'), pch = NULL, col = 1:6, cex = NULL, bg = NA, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL, log = '', ..., add = FALSE, verbose = getOption('verbose'))  "],
    ["matpoints(", "matpoints : function (x, y, type = 'p', lty = 1:5, lwd = 1, pch = NULL, col = 1:6, ...)  "],
    ["mosaicplot(", "mosaicplot : function (x, ...)  "],
    ["mtext(", "mtext : function (text, side = 3, line = 0, outer = FALSE, at = NA, adj = NA, padj = NA, cex = NA, col = NA, font = NA, ...)  "],
    ["pairs(", "pairs : function (x, ...)  "],
    ["pairs.default(", "pairs.default : function (x, labels, panel = points, ..., horInd = 1:nc, verInd = 1:nc, lower.panel = panel, upper.panel = panel, diag.panel = NULL, text.panel = textPanel, label.pos = 0.5 + has.diag/3, line.main = 3, cex.labels = NULL, font.labels = 1, row1attop = TRUE, gap = 1, log = '')  "],
    ["panel.smooth(", "panel.smooth : function (x, y, col = par('col'), bg = NA, pch = par('pch'), cex = 1, col.smooth = 'red', span = 2/3, iter = 3, ...)  "],
    ["par(", "par : function (..., no.readonly = FALSE)  "],
    ["persp(", "persp : function (x, ...)  "],
    ["pie(", "pie : function (x, labels = names(x), edges = 200, radius = 0.8, clockwise = FALSE, init.angle = if (clockwise) 90 else 0, density = NULL, angle = 45, col = NULL, border = NULL, lty = NULL, main = NULL, ...)  "],
    ["plot(", "plot : function (x, y, ...)  "],
    ["plot.default(", "plot.default : function (x, y = NULL, type = 'p', xlim = NULL, ylim = NULL, log = '', main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ann = par('ann'), axes = TRUE, frame.plot = axes, panel.first = NULL, panel.last = NULL, asp = NA, ...)  "],
    ["plot.design(", "plot.design : function (x, y = NULL, fun = mean, data = NULL, ..., ylim = NULL, xlab = 'Factors', ylab = NULL, main = NULL, ask = NULL, xaxt = par('xaxt'), axes = TRUE, xtick = FALSE)  "],
    ["plot.function(", "plot.function : function (x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL, ...)  "],
    ["plot.new(", "plot.new : function ()  "],
    ["plot.window(", "plot.window : function (xlim, ylim, log = '', asp = NA, ...)  "],
    ["plot.xy(", "plot.xy : function (xy, type, pch = par('pch'), lty = par('lty'), col = par('col'), bg = NA, cex = 1, lwd = par('lwd'), ...)  "],
    ["points(", "points : function (x, ...)  "],
    ["points.default(", "points.default : function (x, y = NULL, type = 'p', ...)  "],
    ["polygon(", "polygon : function (x, y = NULL, density = NULL, angle = 45, border = NULL, col = NA, lty = par('lty'), ..., fillOddEven = FALSE)  "],
    ["polypath(", "polypath : function (x, y = NULL, border = NULL, col = NA, lty = par('lty'), rule = 'winding', ...)  "],
    ["rasterImage(", "rasterImage : function (image, xleft, ybottom, xright, ytop, angle = 0, interpolate = TRUE, ...)  "],
    ["rect(", "rect : function (xleft, ybottom, xright, ytop, density = NULL, angle = 45, col = NA, border = NULL, lty = par('lty'), lwd = par('lwd'), ...)  "],
    ["rug(", "rug : function (x, ticksize = 0.03, side = 1, lwd = 0.5, col = par('fg'), quiet = getOption('warn') < 0, ...)  "],
    ["screen(", "screen : function (n = cur.screen, new = TRUE)  "],
    ["segments(", "segments : function (x0, y0, x1 = x0, y1 = y0, col = par('fg'), lty = par('lty'), lwd = par('lwd'), ...)  "],
    ["smoothScatter(", "smoothScatter : function (x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(c('white', blues9)), nrpoints = 100, ret.selection = FALSE, pch = '.', cex = 1, col = 'black', transformation = function(x) x^0.25, postPlotHook = box, xlab = NULL, ylab = NULL, xlim, ylim, xaxs = par('xaxs'), yaxs = par('yaxs'), ...)  "],
    ["spineplot(", "spineplot : function (x, ...)  "],
    ["split.screen(", "split.screen : function (figs, screen, erase = TRUE)  "],
    ["stars(", "stars : function (x, full = TRUE, scale = TRUE, radius = TRUE, labels = dimnames(x)[[1L]], locations = NULL, nrow = NULL, ncol = NULL, len = 1, key.loc = NULL, key.labels = dimnames(x)[[2L]], key.xpd = TRUE, xlim = NULL, ylim = NULL, flip.labels = NULL, draw.segments = FALSE, col.segments = 1L:n.seg, col.stars = NA, col.lines = NA, axes = FALSE, frame.plot = axes, main = NULL, sub = NULL, xlab = '', ylab = '', cex = 0.8, lwd = 0.25, lty = par('lty'), xpd = FALSE, mar = pmin(par('mar'), 1.1 + c(2 * axes + "],
    ["strheight(", "strheight : function (s, units = 'user', cex = NULL, font = NULL, vfont = NULL, ...)  "],
    ["stripchart(", "stripchart : function (x, ...)  "],
    ["strwidth(", "strwidth : function (s, units = 'user', cex = NULL, font = NULL, vfont = NULL, ...)  "],
    ["sunflowerplot(", "sunflowerplot : function (x, ...)  "],
    ["symbols(", "symbols : function (x, y = NULL, circles, squares, rectangles, stars, thermometers, boxplots, inches = TRUE, add = FALSE, fg = par('col'), bg = NA, xlab = NULL, ylab = NULL, main = NULL, xlim = NULL, ylim = NULL, ...)  "],
    ["text(", "text : function (x, ...)  "],
    ["text.default(", "text.default : function (x, y = NULL, labels = seq_along(x$x), adj = NULL, pos = NULL, offset = 0.5, vfont = NULL, cex = 1, col = NULL, font = NULL, ...)  "],
    ["title(", "title : function (main = NULL, sub = NULL, xlab = NULL, ylab = NULL, line = NA, outer = FALSE, ...)  "],
    ["xinch(", "xinch : function (x = 1, warn.log = TRUE)  "],
    ["xspline(", "xspline : function (x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE, draw = TRUE, border = par('fg'), col = NA, ...)  "],
    ["xyinch(", "xyinch : function (xy = 1, warn.log = TRUE)  "],
    ["yinch(", "yinch : function (y = 1, warn.log = TRUE)  "],
    ["-(", "- : function (e1, e2)  "],
    ["-.Date(", "-.Date : function (e1, e2)  "],
    ["-.POSIXt(", "-.POSIXt : function (e1, e2)  "],
    [":(", ": : .Primitive(':') "],
    ["::(", ":: : function (pkg, name)  "],
    [":::(", "::: : function (pkg, name)  "],
    ["!(", "! : function (x)  "],
    ["!.hexmode(", "!.hexmode : function (a)  "],
    ["!.octmode(", "!.octmode : function (a)  "],
    ["!=(", "!= : function (e1, e2)  "],
    ["((", "( : .Primitive('(') "],
    ["[(", "[ : .Primitive('[') "],
    ["[.AsIs(", "[.AsIs : function (x, i, ...)  "],
    ["[.data.frame(", "[.data.frame : function (x, i, j, drop = if (missing(i)) TRUE else length(cols) == 1)  "],
    ["[.Date(", "[.Date : function (x, ..., drop = TRUE)  "],
    ["[.difftime(", "[.difftime : function (x, ..., drop = TRUE)  "],
    ["[.Dlist(", "[.Dlist : function (x, i, ...)  "],
    ["[.DLLInfoList(", "[.DLLInfoList : function (x, ...)  "],
    ["[.factor(", "[.factor : function (x, ..., drop = FALSE)  "],
    ["[.hexmode(", "[.hexmode : function (x, i)  "],
    ["[.listof(", "[.listof : function (x, i, ...)  "],
    ["[.noquote(", "[.noquote : function (x, ...)  "],
    ["[.numeric_version(", "[.numeric_version : function (x, i, j)  "],
    ["[.octmode(", "[.octmode : function (x, i)  "],
    ["[.POSIXct(", "[.POSIXct : function (x, ..., drop = TRUE)  "],
    ["[.POSIXlt(", "[.POSIXlt : function (x, i, j, drop = TRUE)  "],
    ["[.simple.list(", "[.simple.list : function (x, i, ...)  "],
    ["[.table(", "[.table : function (x, i, j, ..., drop = TRUE)  "],
    ["[.warnings(", "[.warnings : function (x, ...)  "],
    ["[[(", "[[ : .Primitive('[[') "],
    ["[[.data.frame(", "[[.data.frame : function (x, ..., exact = TRUE)  "],
    ["[[.Date(", "[[.Date : function (x, ..., drop = TRUE)  "],
    ["[[.factor(", "[[.factor : function (x, ...)  "],
    ["[[.numeric_version(", "[[.numeric_version : function (x, ..., exact = NA)  "],
    ["[[.POSIXct(", "[[.POSIXct : function (x, ..., drop = TRUE)  "],
    ["[[.POSIXlt(", "[[.POSIXlt : function (x, ..., drop = TRUE)  "],
    ["[[<-(", "[[<- : .Primitive('[[<-') "],
    ["[[<-.data.frame(", "[[<-.data.frame : function (x, i, j, value)  "],
    ["[[<-.factor(", "[[<-.factor : function (x, ..., value)  "],
    ["[[<-.numeric_version(", "[[<-.numeric_version : function (x, ..., value)  "],
    ["[<-(", "[<- : .Primitive('[<-') "],
    ["[<-.data.frame(", "[<-.data.frame : function (x, i, j, value)  "],
    ["[<-.Date(", "[<-.Date : function (x, ..., value)  "],
    ["[<-.factor(", "[<-.factor : function (x, ..., value)  "],
    ["[<-.numeric_version(", "[<-.numeric_version : function (x, i, j, value)  "],
    ["[<-.POSIXct(", "[<-.POSIXct : function (x, ..., value)  "],
    ["[<-.POSIXlt(", "[<-.POSIXlt : function (x, i, j, value)  "],
    ["{(", "{ : .Primitive('{') "],
    ["@(", "@ : .Primitive('@') "],
    ["@<-(", "@<- : .Primitive('@<-') "],
    ["*(", "* : function (e1, e2)  "],
    ["*.difftime(", "*.difftime : function (e1, e2)  "],
    ["/(", "/ : function (e1, e2)  "],
    ["/.difftime(", "/.difftime : function (e1, e2)  "],
    ["&(", "& : function (e1, e2)  "],
    ["&.hexmode(", "&.hexmode : function (a, b)  "],
    ["&.octmode(", "&.octmode : function (a, b)  "],
    ["&&(", "&& : .Primitive('&&') "],
    ["%*%(", "%*% : function (x, y)  "],
    ["%/%(", "%/% : function (e1, e2)  "],
    ["%%(", "%% : function (e1, e2)  "],
    ["%in%(", "%in% : function (x, table)  "],
    ["%o%(", "%o% : function (X, Y)  "],
    ["%x%(", "%x% : function (X, Y)  "],
    ["^(", "^ : function (e1, e2)  "],
    ["+(", "+ : function (e1, e2)  "],
    ["+.Date(", "+.Date : function (e1, e2)  "],
    ["+.POSIXt(", "+.POSIXt : function (e1, e2)  "],
    ["<(", "< : function (e1, e2)  "],
    ["<-(", "<- : .Primitive('<-') "],
    ["<<-(", "<<- : .Primitive('<<-') "],
    ["<=(", "<= : function (e1, e2)  "],
    ["=(", "= : .Primitive('=') "],
    ["==(", "== : function (e1, e2)  "],
    [">(", "> : function (e1, e2)  "],
    [">=(", ">= : function (e1, e2)  "],
    ["|(", "| : function (e1, e2)  "],
    ["|.hexmode(", "|.hexmode : function (a, b)  "],
    ["|.octmode(", "|.octmode : function (a, b)  "],
    ["||(", "|| : .Primitive('||') "],
    ["~(", "~ : .Primitive('~') "],
    ["$(", "$ : .Primitive('$') "],
    ["$.data.frame(", "$.data.frame : function (x, name)  "],
    ["$.DLLInfo(", "$.DLLInfo : function (x, name)  "],
    ["$.package_version(", "$.package_version : function (x, name)  "],
    ["$<-(", "$<- : .Primitive('$<-') "],
    ["$<-.data.frame(", "$<-.data.frame : function (x, name, value)  "],
    ["abbreviate(", "abbreviate : function (names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE, strict = FALSE, method = c('left.kept', 'both.sides'), named = TRUE)  "],
    ["abs(", "abs : function (x)  "],
    ["acos(", "acos : function (x)  "],
    ["acosh(", "acosh : function (x)  "],
    ["addNA(", "addNA : function (x, ifany = FALSE)  "],
    ["addTaskCallback(", "addTaskCallback : function (f, data = NULL, name = character())  "],
    ["agrep(", "agrep : function (pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, value = FALSE, fixed = TRUE, useBytes = FALSE)  "],
    ["agrepl(", "agrepl : function (pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, fixed = TRUE, useBytes = FALSE)  "],
    ["alist(", "alist : function (...)  "],
    ["all(", "all : function (..., na.rm = FALSE)  "],
    ["all.equal(", "all.equal : function (target, current, ...)  "],
    ["all.equal.character(", "all.equal.character : function (target, current, ..., check.attributes = TRUE)  "],
    ["all.equal.default(", "all.equal.default : function (target, current, ...)  "],
    ["all.equal.environment(", "all.equal.environment : function (target, current, all.names = TRUE, ...)  "],
    ["all.equal.envRefClass(", "all.equal.envRefClass : function (target, current, ...)  "],
    ["all.equal.factor(", "all.equal.factor : function (target, current, ..., check.attributes = TRUE)  "],
    ["all.equal.formula(", "all.equal.formula : function (target, current, ...)  "],
    ["all.equal.language(", "all.equal.language : function (target, current, ...)  "],
    ["all.equal.list(", "all.equal.list : function (target, current, ..., check.attributes = TRUE, use.names = TRUE)  "],
    ["all.equal.numeric(", "all.equal.numeric : function (target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, ..., check.attributes = TRUE)  "],
    ["all.equal.POSIXt(", "all.equal.POSIXt : function (target, current, ..., tolerance = 0.001, scale)  "],
    ["all.equal.raw(", "all.equal.raw : function (target, current, ..., check.attributes = TRUE)  "],
    ["all.names(", "all.names : function (expr, functions = TRUE, max.names = -1L, unique = FALSE)  "],
    ["all.vars(", "all.vars : function (expr, functions = FALSE, max.names = -1L, unique = TRUE)  "],
    ["allowInterrupts(", "allowInterrupts : function (expr)  "],
    ["any(", "any : function (..., na.rm = FALSE)  "],
    ["anyDuplicated(", "anyDuplicated : function (x, incomparables = FALSE, ...)  "],
    ["anyDuplicated.array(", "anyDuplicated.array : function (x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...)  "],
    ["anyDuplicated.data.frame(", "anyDuplicated.data.frame : function (x, incomparables = FALSE, fromLast = FALSE, ...)  "],
    ["anyDuplicated.default(", "anyDuplicated.default : function (x, incomparables = FALSE, fromLast = FALSE, ...)  "],
    ["anyDuplicated.matrix(", "anyDuplicated.matrix : function (x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...)  "],
    ["anyNA(", "anyNA : function (x, recursive = FALSE)  "],
    ["anyNA.numeric_version(", "anyNA.numeric_version : function (x, recursive = FALSE)  "],
    ["anyNA.POSIXlt(", "anyNA.POSIXlt : function (x, recursive = FALSE)  "],
    ["aperm(", "aperm : function (a, perm, ...)  "],
    ["aperm.default(", "aperm.default : function (a, perm = NULL, resize = TRUE, ...)  "],
    ["aperm.table(", "aperm.table : function (a, perm = NULL, resize = TRUE, keep.class = TRUE, ...)  "],
    ["append(", "append : function (x, values, after = length(x))  "],
    ["apply(", "apply : function (X, MARGIN, FUN, ...)  "],
    ["Arg(", "Arg : function (z)  "],
    ["args(", "args : function (name)  "],
    ["array(", "array : function (data = NA, dim = length(data), dimnames = NULL)  "],
    ["arrayInd(", "arrayInd : function (ind, .dim, .dimnames = NULL, useNames = FALSE)  "],
    ["as.array(", "as.array : function (x, ...)  "],
    ["as.array.default(", "as.array.default : function (x, ...)  "],
    ["as.call(", "as.call : function (x)  "],
    ["as.character(", "as.character : function (x, ...)  "],
    ["as.character.condition(", "as.character.condition : function (x, ...)  "],
    ["as.character.Date(", "as.character.Date : function (x, ...)  "],
    ["as.character.default(", "as.character.default : function (x, ...)  "],
    ["as.character.error(", "as.character.error : function (x, ...)  "],
    ["as.character.factor(", "as.character.factor : function (x, ...)  "],
    ["as.character.hexmode(", "as.character.hexmode : function (x, ...)  "],
    ["as.character.numeric_version(", "as.character.numeric_version : function (x, ...)  "],
    ["as.character.octmode(", "as.character.octmode : function (x, ...)  "],
    ["as.character.POSIXt(", "as.character.POSIXt : function (x, ...)  "],
    ["as.character.srcref(", "as.character.srcref : function (x, useSource = TRUE, to = x, ...)  "],
    ["as.complex(", "as.complex : function (x, ...)  "],
    ["as.data.frame(", "as.data.frame : function (x, row.names = NULL, optional = FALSE, ...)  "],
    ["as.data.frame.array(", "as.data.frame.array : function (x, row.names = NULL, optional = FALSE, ...)  "],
    ["as.data.frame.AsIs(", "as.data.frame.AsIs : function (x, row.names = NULL, optional = FALSE, ...)  "],
    ["as.data.frame.character(", "as.data.frame.character : function (x, ..., stringsAsFactors = default.stringsAsFactors())  "],
    ["as.data.frame.complex(", "as.data.frame.complex : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.data.frame(", "as.data.frame.data.frame : function (x, row.names = NULL, ...)  "],
    ["as.data.frame.Date(", "as.data.frame.Date : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.default(", "as.data.frame.default : function (x, ...)  "],
    ["as.data.frame.difftime(", "as.data.frame.difftime : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.factor(", "as.data.frame.factor : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.integer(", "as.data.frame.integer : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.list(", "as.data.frame.list : function (x, row.names = NULL, optional = FALSE, ..., cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors())  "],
    ["as.data.frame.logical(", "as.data.frame.logical : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.matrix(", "as.data.frame.matrix : function (x, row.names = NULL, optional = FALSE, make.names = TRUE, ..., stringsAsFactors = default.stringsAsFactors())  "],
    ["as.data.frame.model.matrix(", "as.data.frame.model.matrix : function (x, row.names = NULL, optional = FALSE, make.names = TRUE, ...)  "],
    ["as.data.frame.noquote(", "as.data.frame.noquote : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.numeric(", "as.data.frame.numeric : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.numeric_version(", "as.data.frame.numeric_version : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.ordered(", "as.data.frame.ordered : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.POSIXct(", "as.data.frame.POSIXct : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.POSIXlt(", "as.data.frame.POSIXlt : function (x, row.names = NULL, optional = FALSE, ...)  "],
    ["as.data.frame.raw(", "as.data.frame.raw : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.data.frame.table(", "as.data.frame.table : function (x, row.names = NULL, ..., responseName = 'Freq', stringsAsFactors = TRUE, sep = '', base = list(LETTERS))  "],
    ["as.data.frame.ts(", "as.data.frame.ts : function (x, ...)  "],
    ["as.data.frame.vector(", "as.data.frame.vector : function (x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = ' '))  "],
    ["as.Date(", "as.Date : function (x, ...)  "],
    ["as.Date.character(", "as.Date.character : function (x, format, tryFormats = c('%Y-%m-%d', '%Y/%m/%d'), optional = FALSE, ...)  "],
    ["as.Date.default(", "as.Date.default : function (x, ...)  "],
    ["as.Date.factor(", "as.Date.factor : function (x, ...)  "],
    ["as.Date.numeric(", "as.Date.numeric : function (x, origin, ...)  "],
    ["as.Date.POSIXct(", "as.Date.POSIXct : function (x, tz = 'UTC', ...)  "],
    ["as.Date.POSIXlt(", "as.Date.POSIXlt : function (x, ...)  "],
    ["as.difftime(", "as.difftime : function (tim, format = '%X', units = 'auto')  "],
    ["as.double(", "as.double : function (x, ...)  "],
    ["as.double.difftime(", "as.double.difftime : function (x, units = 'auto', ...)  "],
    ["as.double.POSIXlt(", "as.double.POSIXlt : function (x, ...)  "],
    ["as.environment(", "as.environment : function (x)  "],
    ["as.expression(", "as.expression : function (x, ...)  "],
    ["as.expression.default(", "as.expression.default : function (x, ...)  "],
    ["as.factor(", "as.factor : function (x)  "],
    ["as.function(", "as.function : function (x, ...)  "],
    ["as.function.default(", "as.function.default : function (x, envir = parent.frame(), ...)  "],
    ["as.hexmode(", "as.hexmode : function (x)  "],
    ["as.integer(", "as.integer : function (x, ...)  "],
    ["as.list(", "as.list : function (x, ...)  "],
    ["as.list.data.frame(", "as.list.data.frame : function (x, ...)  "],
    ["as.list.Date(", "as.list.Date : function (x, ...)  "],
    ["as.list.default(", "as.list.default : function (x, ...)  "],
    ["as.list.environment(", "as.list.environment : function (x, all.names = FALSE, sorted = FALSE, ...)  "],
    ["as.list.factor(", "as.list.factor : function (x, ...)  "],
    ["as.list.function(", "as.list.function : function (x, ...)  "],
    ["as.list.numeric_version(", "as.list.numeric_version : function (x, ...)  "],
    ["as.list.POSIXct(", "as.list.POSIXct : function (x, ...)  "],
    ["as.list.POSIXlt(", "as.list.POSIXlt : function (x, ...)  "],
    ["as.logical(", "as.logical : function (x, ...)  "],
    ["as.logical.factor(", "as.logical.factor : function (x, ...)  "],
    ["as.matrix(", "as.matrix : function (x, ...)  "],
    ["as.matrix.data.frame(", "as.matrix.data.frame : function (x, rownames.force = NA, ...)  "],
    ["as.matrix.default(", "as.matrix.default : function (x, ...)  "],
    ["as.matrix.noquote(", "as.matrix.noquote : function (x, ...)  "],
    ["as.matrix.POSIXlt(", "as.matrix.POSIXlt : function (x, ...)  "],
    ["as.name(", "as.name : function (x)  "],
    ["as.null(", "as.null : function (x, ...)  "],
    ["as.null.default(", "as.null.default : function (x, ...)  "],
    ["as.numeric(", "as.numeric : function (x, ...)  "],
    ["as.numeric_version(", "as.numeric_version : function (x)  "],
    ["as.octmode(", "as.octmode : function (x)  "],
    ["as.ordered(", "as.ordered : function (x)  "],
    ["as.package_version(", "as.package_version : function (x)  "],
    ["as.pairlist(", "as.pairlist : function (x)  "],
    ["as.POSIXct(", "as.POSIXct : function (x, tz = '', ...)  "],
    ["as.POSIXct.Date(", "as.POSIXct.Date : function (x, ...)  "],
    ["as.POSIXct.default(", "as.POSIXct.default : function (x, tz = '', ...)  "],
    ["as.POSIXct.numeric(", "as.POSIXct.numeric : function (x, tz = '', origin, ...)  "],
    ["as.POSIXct.POSIXlt(", "as.POSIXct.POSIXlt : function (x, tz = '', ...)  "],
    ["as.POSIXlt(", "as.POSIXlt : function (x, tz = '', ...)  "],
    ["as.POSIXlt.character(", "as.POSIXlt.character : function (x, tz = '', format, tryFormats = c('%Y-%m-%d %H:%M:%OS', '%Y/%m/%d %H:%M:%OS', '%Y-%m-%d %H:%M', '%Y/%m/%d %H:%M', '%Y-%m-%d', '%Y/%m/%d'), optional = FALSE, ...)  "],
    ["as.POSIXlt.Date(", "as.POSIXlt.Date : function (x, ...)  "],
    ["as.POSIXlt.default(", "as.POSIXlt.default : function (x, tz = '', optional = FALSE, ...)  "],
    ["as.POSIXlt.factor(", "as.POSIXlt.factor : function (x, ...)  "],
    ["as.POSIXlt.numeric(", "as.POSIXlt.numeric : function (x, tz = '', origin, ...)  "],
    ["as.POSIXlt.POSIXct(", "as.POSIXlt.POSIXct : function (x, tz = '', ...)  "],
    ["as.qr(", "as.qr : function (x)  "],
    ["as.raw(", "as.raw : function (x)  "],
    ["as.single(", "as.single : function (x, ...)  "],
    ["as.single.default(", "as.single.default : function (x, ...)  "],
    ["as.symbol(", "as.symbol : function (x)  "],
    ["as.table(", "as.table : function (x, ...)  "],
    ["as.table.default(", "as.table.default : function (x, ...)  "],
    ["as.vector(", "as.vector : function (x, mode = 'any')  "],
    ["as.vector.factor(", "as.vector.factor : function (x, mode = 'any')  "],
    ["asin(", "asin : function (x)  "],
    ["asinh(", "asinh : function (x)  "],
    ["asNamespace(", "asNamespace : function (ns, base.OK = TRUE)  "],
    ["asS3(", "asS3 : function (object, flag = TRUE, complete = TRUE)  "],
    ["asS4(", "asS4 : function (object, flag = TRUE, complete = TRUE)  "],
    ["assign(", "assign : function (x, value, pos = -1, envir = as.environment(pos), inherits = FALSE, immediate = TRUE)  "],
    ["atan(", "atan : function (x)  "],
    ["atan2(", "atan2 : function (y, x)  "],
    ["atanh(", "atanh : function (x)  "],
    ["attach(", "attach : function (what, pos = 2L, name = deparse(substitute(what), backtick = FALSE), warn.conflicts = TRUE)  "],
    ["attachNamespace(", "attachNamespace : function (ns, pos = 2L, depends = NULL)  "],
    ["attr(", "attr : function (x, which, exact = FALSE)  "],
    ["attr.all.equal(", "attr.all.equal : function (target, current, ..., check.attributes = TRUE, check.names = TRUE)  "],
    ["attr<-(", "attr<- : function (x, which, value)  "],
    ["attributes(", "attributes : function (obj)  "],
    ["attributes<-(", "attributes<- : function (obj, value)  "],
    ["autoload(", "autoload : function (name, package, reset = FALSE, ...)  "],
    ["autoloader(", "autoloader : function (name, package, ...)  "],
    ["backsolve(", "backsolve : function (r, x, k = ncol(r), upper.tri = TRUE, transpose = FALSE)  "],
    ["baseenv(", "baseenv : function ()  "],
    ["basename(", "basename : function (path)  "],
    ["besselI(", "besselI : function (x, nu, expon.scaled = FALSE)  "],
    ["besselJ(", "besselJ : function (x, nu)  "],
    ["besselK(", "besselK : function (x, nu, expon.scaled = FALSE)  "],
    ["besselY(", "besselY : function (x, nu)  "],
    ["beta(", "beta : function (a, b)  "],
    ["bindingIsActive(", "bindingIsActive : function (sym, env)  "],
    ["bindingIsLocked(", "bindingIsLocked : function (sym, env)  "],
    ["bindtextdomain(", "bindtextdomain : function (domain, dirname = NULL)  "],
    ["bitwAnd(", "bitwAnd : function (a, b)  "],
    ["bitwNot(", "bitwNot : function (a)  "],
    ["bitwOr(", "bitwOr : function (a, b)  "],
    ["bitwShiftL(", "bitwShiftL : function (a, n)  "],
    ["bitwShiftR(", "bitwShiftR : function (a, n)  "],
    ["bitwXor(", "bitwXor : function (a, b)  "],
    ["body(", "body : function (fun = sys.function(sys.parent()))  "],
    ["body<-(", "body<- : function (fun, envir = environment(fun), value)  "],
    ["bquote(", "bquote : function (expr, where = parent.frame())  "],
    ["break(", "break : .Primitive('break') "],
    ["browser(", "browser : function (text = '', condition = NULL, expr = TRUE, skipCalls = 0L)  "],
    ["browserCondition(", "browserCondition : function (n = 1L)  "],
    ["browserSetDebug(", "browserSetDebug : function (n = 1L)  "],
    ["browserText(", "browserText : function (n = 1L)  "],
    ["builtins(", "builtins : function (internal = FALSE)  "],
    ["by(", "by : function (data, INDICES, FUN, ..., simplify = TRUE)  "],
    ["by.data.frame(", "by.data.frame : function (data, INDICES, FUN, ..., simplify = TRUE)  "],
    ["by.default(", "by.default : function (data, INDICES, FUN, ..., simplify = TRUE)  "],
    ["bzfile(", "bzfile : function (description, open = '', encoding = getOption('encoding'), compression = 9)  "],
    ["c(", "c : function (...)  "],
    ["c.Date(", "c.Date : function (..., recursive = FALSE)  "],
    ["c.difftime(", "c.difftime : function (..., recursive = FALSE)  "],
    ["c.noquote(", "c.noquote : function (..., recursive = FALSE)  "],
    ["c.numeric_version(", "c.numeric_version : function (..., recursive = FALSE)  "],
    ["c.POSIXct(", "c.POSIXct : function (..., recursive = FALSE)  "],
    ["c.POSIXlt(", "c.POSIXlt : function (..., recursive = FALSE)  "],
    ["c.warnings(", "c.warnings : function (..., recursive = FALSE)  "],
    ["call(", "call : function (name, ...)  "],
    ["callCC(", "callCC : function (fun)  "],
    ["capabilities(", "capabilities : function (what = NULL)  "],
    ["casefold(", "casefold : function (x, upper = FALSE)  "],
    ["cat(", "cat : function (..., file = '', sep = ' ', fill = FALSE, labels = NULL, append = FALSE)  "],
    ["cbind(", "cbind : function (..., deparse.level = 1)  "],
    ["cbind.data.frame(", "cbind.data.frame : function (..., deparse.level = 1)  "],
    ["ceiling(", "ceiling : function (x)  "],
    ["char.expand(", "char.expand : function (input, target, nomatch = stop('no match'))  "],
    ["character(", "character : function (length = 0L)  "],
    ["charmatch(", "charmatch : function (x, table, nomatch = NA_integer_)  "],
    ["charToRaw(", "charToRaw : function (x)  "],
    ["chartr(", "chartr : function (old, new, x)  "],
    ["check_tzones(", "check_tzones : function (...)  "],
    ["chkDots(", "chkDots : function (..., which.call = -1, allowed = character(0))  "],
    ["chol(", "chol : function (x, ...)  "],
    ["chol.default(", "chol.default : function (x, pivot = FALSE, LINPACK = FALSE, tol = -1, ...)  "],
    ["chol2inv(", "chol2inv : function (x, size = NCOL(x), LINPACK = FALSE)  "],
    ["choose(", "choose : function (n, k)  "],
    ["class(", "class : function (x)  "],
    ["class<-(", "class<- : function (x, value)  "],
    ["clearPushBack(", "clearPushBack : function (connection)  "],
    ["close(", "close : function (con, ...)  "],
    ["close.connection(", "close.connection : function (con, type = 'rw', ...)  "],
    ["close.srcfile(", "close.srcfile : function (con, ...)  "],
    ["close.srcfilealias(", "close.srcfilealias : function (con, ...)  "],
    ["closeAllConnections(", "closeAllConnections : function ()  "],
    ["col(", "col : function (x, as.factor = FALSE)  "],
    ["colMeans(", "colMeans : function (x, na.rm = FALSE, dims = 1L)  "],
    ["colnames(", "colnames : function (x, do.NULL = TRUE, prefix = 'col')  "],
    ["colnames<-(", "colnames<- : function (x, value)  "],
    ["colSums(", "colSums : function (x, na.rm = FALSE, dims = 1L)  "],
    ["commandArgs(", "commandArgs : function (trailingOnly = FALSE)  "],
    ["comment(", "comment : function (x)  "],
    ["comment<-(", "comment<- : function (x, value)  "],
    ["complex(", "complex : function (length.out = 0L, real = numeric(), imaginary = numeric(), modulus = 1, argument = 0)  "],
    ["computeRestarts(", "computeRestarts : function (cond = NULL)  "],
    ["conditionCall(", "conditionCall : function (c)  "],
    ["conditionCall.condition(", "conditionCall.condition : function (c)  "],
    ["conditionMessage(", "conditionMessage : function (c)  "],
    ["conditionMessage.condition(", "conditionMessage.condition : function (c)  "],
    ["conflicts(", "conflicts : function (where = search(), detail = FALSE)  "],
    ["Conj(", "Conj : function (z)  "],
    ["contributors(", "contributors : function ()  "],
    ["cos(", "cos : function (x)  "],
    ["cosh(", "cosh : function (x)  "],
    ["cospi(", "cospi : function (x)  "],
    ["crossprod(", "crossprod : function (x, y = NULL)  "],
    ["Cstack_info(", "Cstack_info : function ()  "],
    ["cummax(", "cummax : function (x)  "],
    ["cummin(", "cummin : function (x)  "],
    ["cumprod(", "cumprod : function (x)  "],
    ["cumsum(", "cumsum : function (x)  "],
    ["curlGetHeaders(", "curlGetHeaders : function (url, redirect = TRUE, verify = TRUE)  "],
    ["cut(", "cut : function (x, ...)  "],
    ["cut.Date(", "cut.Date : function (x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ...)  "],
    ["cut.default(", "cut.default : function (x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE, dig.lab = 3L, ordered_result = FALSE, ...)  "],
    ["cut.POSIXt(", "cut.POSIXt : function (x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ...)  "],
    ["data.class(", "data.class : function (x)  "],
    ["data.frame(", "data.frame : function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors())  "],
    ["data.matrix(", "data.matrix : function (frame, rownames.force = NA)  "],
    ["date(", "date : function ()  "],
    ["debug(", "debug : function (fun, text = '', condition = NULL, signature = NULL)  "],
    ["debuggingState(", "debuggingState : function (on = NULL)  "],
    ["debugonce(", "debugonce : function (fun, text = '', condition = NULL, signature = NULL)  "],
    ["default.stringsAsFactors(", "default.stringsAsFactors : function ()  "],
    ["delayedAssign(", "delayedAssign : function (x, value, eval.env = parent.frame(1), assign.env = parent.frame(1))  "],
    ["deparse(", "deparse : function (expr, width.cutoff = 60L, backtick = mode(expr) %in% c('call', 'expression', '(', 'function'), control = c('keepNA', 'keepInteger', 'niceNames', 'showAttributes'), nlines = -1L)  "],
    ["det(", "det : function (x, ...)  "],
    ["detach(", "detach : function (name, pos = 2L, unload = FALSE, character.only = FALSE, force = FALSE)  "],
    ["determinant(", "determinant : function (x, logarithm = TRUE, ...)  "],
    ["determinant.matrix(", "determinant.matrix : function (x, logarithm = TRUE, ...)  "],
    ["dget(", "dget : function (file, keep.source = FALSE)  "],
    ["diag(", "diag : function (x = 1, nrow, ncol, names = TRUE)  "],
    ["diag<-(", "diag<- : function (x, value)  "],
    ["diff(", "diff : function (x, ...)  "],
    ["diff.Date(", "diff.Date : function (x, lag = 1L, differences = 1L, ...)  "],
    ["diff.default(", "diff.default : function (x, lag = 1L, differences = 1L, ...)  "],
    ["diff.difftime(", "diff.difftime : function (x, ...)  "],
    ["diff.POSIXt(", "diff.POSIXt : function (x, lag = 1L, differences = 1L, ...)  "],
    ["difftime(", "difftime : function (time1, time2, tz, units = c('auto', 'secs', 'mins', 'hours', 'days', 'weeks'))  "],
    ["digamma(", "digamma : function (x)  "],
    ["dim(", "dim : function (x)  "],
    ["dim.data.frame(", "dim.data.frame : function (x)  "],
    ["dim<-(", "dim<- : function (x, value)  "],
    ["dimnames(", "dimnames : function (x)  "],
    ["dimnames.data.frame(", "dimnames.data.frame : function (x)  "],
    ["dimnames<-(", "dimnames<- : function (x, value)  "],
    ["dimnames<-.data.frame(", "dimnames<-.data.frame : function (x, value)  "],
    ["dir(", "dir : function (path = '.', pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)  "],
    ["dir.create(", "dir.create : function (path, showWarnings = TRUE, recursive = FALSE, mode = '0777')  "],
    ["dir.exists(", "dir.exists : function (paths)  "],
    ["dirname(", "dirname : function (path)  "],
    ["do.call(", "do.call : function (what, args, quote = FALSE, envir = parent.frame())  "],
    ["dontCheck(", "dontCheck : function (x)  "],
    ["double(", "double : function (length = 0L)  "],
    ["dput(", "dput : function (x, file = '', control = c('keepNA', 'keepInteger', 'niceNames', 'showAttributes'))  "],
    ["dQuote(", "dQuote : function (x)  "],
    ["drop(", "drop : function (x)  "],
    ["droplevels(", "droplevels : function (x, ...)  "],
    ["droplevels.data.frame(", "droplevels.data.frame : function (x, except = NULL, exclude, ...)  "],
    ["droplevels.factor(", "droplevels.factor : function (x, exclude = if (anyNA(levels(x))) NULL else NA, ...)  "],
    ["dump(", "dump : function (list, file = 'dumpdata.R', append = FALSE, control = 'all', envir = parent.frame(), evaluate = TRUE)  "],
    ["duplicated(", "duplicated : function (x, incomparables = FALSE, ...)  "],
    ["duplicated.array(", "duplicated.array : function (x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...)  "],
    ["duplicated.data.frame(", "duplicated.data.frame : function (x, incomparables = FALSE, fromLast = FALSE, ...)  "],
    ["duplicated.default(", "duplicated.default : function (x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ...)  "],
    ["duplicated.matrix(", "duplicated.matrix : function (x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...)  "],
    ["duplicated.numeric_version(", "duplicated.numeric_version : function (x, incomparables = FALSE, ...)  "],
    ["duplicated.POSIXlt(", "duplicated.POSIXlt : function (x, incomparables = FALSE, ...)  "],
    ["duplicated.warnings(", "duplicated.warnings : function (x, incomparables = FALSE, ...)  "],
    ["dyn.load(", "dyn.load : function (x, local = TRUE, now = TRUE, ...)  "],
    ["dyn.unload(", "dyn.unload : function (x)  "],
    ["dynGet(", "dynGet : function (x, ifnotfound = stop(gettextf('%s not found', sQuote(x)), domain = NA), minframe = 1L, inherits = FALSE)  "],
    ["eapply(", "eapply : function (env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE)  "],
    ["eigen(", "eigen : function (x, symmetric, only.values = FALSE, EISPACK = FALSE)  "],
    ["emptyenv(", "emptyenv : function ()  "],
    ["enc2native(", "enc2native : function (x)  "],
    ["enc2utf8(", "enc2utf8 : function (x)  "],
    ["encodeString(", "encodeString : function (x, width = 0L, quote = '', na.encode = TRUE, justify = c('left', 'right', 'centre', 'none'))  "],
    ["Encoding(", "Encoding : function (x)  "],
    ["Encoding<-(", "Encoding<- : function (x, value)  "],
    ["endsWith(", "endsWith : function (x, suffix)  "],
    ["enquote(", "enquote : function (cl)  "],
    ["env.profile(", "env.profile : function (env)  "],
    ["environment(", "environment : function (fun = NULL)  "],
    ["environment<-(", "environment<- : function (fun, value)  "],
    ["environmentIsLocked(", "environmentIsLocked : function (env)  "],
    ["environmentName(", "environmentName : function (env)  "],
    ["eval(", "eval : function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv())  "],
    ["eval.parent(", "eval.parent : function (expr, n = 1)  "],
    ["evalq(", "evalq : function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv())  "],
    ["exists(", "exists : function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), frame, mode = 'any', inherits = TRUE)  "],
    ["exp(", "exp : function (x)  "],
    ["expand.grid(", "expand.grid : function (..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE)  "],
    ["expm1(", "expm1 : function (x)  "],
    ["expression(", "expression : function (...)  "],
    ["extSoftVersion(", "extSoftVersion : function ()  "],
    ["factor(", "factor : function (x = character(), levels, labels = levels, exclude = NA, ordered = is.ordered(x), nmax = NA)  "],
    ["factorial(", "factorial : function (x)  "],
    ["fifo(", "fifo : function (description, open = '', blocking = FALSE, encoding = getOption('encoding'))  "],
    ["file(", "file : function (description = '', open = '', blocking = TRUE, encoding = getOption('encoding'), raw = FALSE, method = getOption('url.method', 'default'))  "],
    ["file.access(", "file.access : function (names, mode = 0)  "],
    ["file.append(", "file.append : function (file1, file2)  "],
    ["file.choose(", "file.choose : function (new = FALSE)  "],
    ["file.copy(", "file.copy : function (from, to, overwrite = recursive, recursive = FALSE, copy.mode = TRUE, copy.date = FALSE)  "],
    ["file.create(", "file.create : function (..., showWarnings = TRUE)  "],
    ["file.exists(", "file.exists : function (...)  "],
    ["file.info(", "file.info : function (..., extra_cols = TRUE)  "],
    ["file.link(", "file.link : function (from, to)  "],
    ["file.mode(", "file.mode : function (...)  "],
    ["file.mtime(", "file.mtime : function (...)  "],
    ["file.path(", "file.path : function (..., fsep = .Platform$file.sep)  "],
    ["file.remove(", "file.remove : function (...)  "],
    ["file.rename(", "file.rename : function (from, to)  "],
    ["file.show(", "file.show : function (..., header = rep('', nfiles), title = 'R Information', delete.file = FALSE, pager = getOption('pager'), encoding = '')  "],
    ["file.size(", "file.size : function (...)  "],
    ["file.symlink(", "file.symlink : function (from, to)  "],
    ["Filter(", "Filter : function (f, x)  "],
    ["Find(", "Find : function (f, x, right = FALSE, nomatch = NULL)  "],
    ["find.package(", "find.package : function (package = NULL, lib.loc = NULL, quiet = FALSE, verbose = getOption('verbose'))  "],
    ["findInterval(", "findInterval : function (x, vec, rightmost.closed = FALSE, all.inside = FALSE, left.open = FALSE)  "],
    ["findPackageEnv(", "findPackageEnv : function (info)  "],
    ["findRestart(", "findRestart : function (name, cond = NULL)  "],
    ["floor(", "floor : function (x)  "],
    ["flush(", "flush : function (con)  "],
    ["flush.connection(", "flush.connection : function (con)  "],
    ["for(", "for : .Primitive('for') "],
    ["force(", "force : function (x)  "],
    ["forceAndCall(", "forceAndCall : function (n, FUN, ...)  "],
    ["formals(", "formals : function (fun = sys.function(sys.parent()))  "],
    ["formals<-(", "formals<- : function (fun, envir = environment(fun), value)  "],
    ["format(", "format : function (x, ...)  "],
    ["format.AsIs(", "format.AsIs : function (x, width = 12, ...)  "],
    ["format.data.frame(", "format.data.frame : function (x, ..., justify = 'none')  "],
    ["format.Date(", "format.Date : function (x, ...)  "],
    ["format.default(", "format.default : function (x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c('left', 'right', 'centre', 'none'), width = NULL, na.encode = TRUE, scientific = NA, big.mark = '', big.interval = 3L, small.mark = '', small.interval = 5L, decimal.mark = getOption('OutDec'), zero.print = NULL, drop0trailing = FALSE, ...)  "],
    ["format.difftime(", "format.difftime : function (x, ...)  "],
    ["format.factor(", "format.factor : function (x, ...)  "],
    ["format.hexmode(", "format.hexmode : function (x, width = NULL, upper.case = FALSE, ...)  "],
    ["format.info(", "format.info : function (x, digits = NULL, nsmall = 0L)  "],
    ["format.libraryIQR(", "format.libraryIQR : function (x, ...)  "],
    ["format.numeric_version(", "format.numeric_version : function (x, ...)  "],
    ["format.octmode(", "format.octmode : function (x, width = NULL, ...)  "],
    ["format.packageInfo(", "format.packageInfo : function (x, ...)  "],
    ["format.POSIXct(", "format.POSIXct : function (x, format = '', tz = '', usetz = FALSE, ...)  "],
    ["format.POSIXlt(", "format.POSIXlt : function (x, format = '', usetz = FALSE, ...)  "],
    ["format.pval(", "format.pval : function (pv, digits = max(1L, getOption('digits') - 2L), eps = .Machine$double.eps, na.form = 'NA', ...)  "],
    ["format.summaryDefault(", "format.summaryDefault : function (x, digits = max(3L, getOption('digits') - 3L), ...)  "],
    ["formatC(", "formatC : function (x, digits = NULL, width = NULL, format = NULL, flag = '', mode = NULL, big.mark = '', big.interval = 3L, small.mark = '', small.interval = 5L, decimal.mark = getOption('OutDec'), preserve.width = 'individual', zero.print = NULL, drop0trailing = FALSE)  "],
    ["formatDL(", "formatDL : function (x, y, style = c('table', 'list'), width = 0.9 * getOption('width'), indent = NULL)  "],
    ["forwardsolve(", "forwardsolve : function (l, x, k = ncol(l), upper.tri = FALSE, transpose = FALSE)  "],
    ["function(", "function : .Primitive('function') "],
    ["gamma(", "gamma : function (x)  "],
    ["gc(", "gc : function (verbose = getOption('verbose'), reset = FALSE, full = TRUE)  "],
    ["gc.time(", "gc.time : function (on = TRUE)  "],
    ["gcinfo(", "gcinfo : function (verbose)  "],
    ["gctorture(", "gctorture : function (on = TRUE)  "],
    ["gctorture2(", "gctorture2 : function (step, wait = step, inhibit_release = FALSE)  "],
    ["get(", "get : function (x, pos = -1L, envir = as.environment(pos), mode = 'any', inherits = TRUE)  "],
    ["get0(", "get0 : function (x, envir = pos.to.env(-1L), mode = 'any', inherits = TRUE, ifnotfound = NULL)  "],
    ["getAllConnections(", "getAllConnections : function ()  "],
    ["getCallingDLL(", "getCallingDLL : function (f = sys.function(-1), doStop = FALSE)  "],
    ["getCallingDLLe(", "getCallingDLLe : function (e)  "],
    ["getConnection(", "getConnection : function (what)  "],
    ["getDLLRegisteredRoutines(", "getDLLRegisteredRoutines : function (dll, addNames = TRUE)  "],
    ["getDLLRegisteredRoutines.character(", "getDLLRegisteredRoutines.character : function (dll, addNames = TRUE)  "],
    ["getDLLRegisteredRoutines.DLLInfo(", "getDLLRegisteredRoutines.DLLInfo : function (dll, addNames = TRUE)  "],
    ["getElement(", "getElement : function (object, name)  "],
    ["geterrmessage(", "geterrmessage : function ()  "],
    ["getExportedValue(", "getExportedValue : function (ns, name)  "],
    ["getHook(", "getHook : function (hookName)  "],
    ["getLoadedDLLs(", "getLoadedDLLs : function ()  "],
    ["getNamespace(", "getNamespace : function (name)  "],
    ["getNamespaceExports(", "getNamespaceExports : function (ns)  "],
    ["getNamespaceImports(", "getNamespaceImports : function (ns)  "],
    ["getNamespaceInfo(", "getNamespaceInfo : function (ns, which)  "],
    ["getNamespaceName(", "getNamespaceName : function (ns)  "],
    ["getNamespaceUsers(", "getNamespaceUsers : function (ns)  "],
    ["getNamespaceVersion(", "getNamespaceVersion : function (ns)  "],
    ["getNativeSymbolInfo(", "getNativeSymbolInfo : function (name, PACKAGE, unlist = TRUE, withRegistrationInfo = FALSE)  "],
    ["getOption(", "getOption : function (x, default = NULL)  "],
    ["getRversion(", "getRversion : function ()  "],
    ["getSrcLines(", "getSrcLines : function (srcfile, first, last)  "],
    ["getTaskCallbackNames(", "getTaskCallbackNames : function ()  "],
    ["gettext(", "gettext : function (..., domain = NULL)  "],
    ["gettextf(", "gettextf : function (fmt, ..., domain = NULL)  "],
    ["getwd(", "getwd : function ()  "],
    ["gl(", "gl : function (n, k, length = n * k, labels = seq_len(n), ordered = FALSE)  "],
    ["globalenv(", "globalenv : function ()  "],
    ["gregexpr(", "gregexpr : function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["grep(", "grep : function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE)  "],
    ["grepl(", "grepl : function (pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["grepRaw(", "grepRaw : function (pattern, x, offset = 1L, ignore.case = FALSE, value = FALSE, fixed = FALSE, all = FALSE, invert = FALSE)  "],
    ["grouping(", "grouping : function (...)  "],
    ["gsub(", "gsub : function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["gzcon(", "gzcon : function (con, level = 6, allowNonCompressed = TRUE, text = FALSE)  "],
    ["gzfile(", "gzfile : function (description, open = '', encoding = getOption('encoding'), compression = 6)  "],
    ["I(", "I : function (x)  "],
    ["iconv(", "iconv : function (x, from = '', to = '', sub = NA, mark = TRUE, toRaw = FALSE)  "],
    ["iconvlist(", "iconvlist : function ()  "],
    ["icuGetCollate(", "icuGetCollate : function (type = c('actual', 'valid'))  "],
    ["icuSetCollate(", "icuSetCollate : function (...)  "],
    ["identical(", "identical : function (x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE, ignore.bytecode = TRUE, ignore.environment = FALSE, ignore.srcref = TRUE)  "],
    ["identity(", "identity : function (x)  "],
    ["if(", "if : .Primitive('if') "],
    ["ifelse(", "ifelse : function (test, yes, no)  "],
    ["Im(", "Im : function (z)  "],
    ["importIntoEnv(", "importIntoEnv : function (impenv, impnames, expenv, expnames)  "],
    ["inherits(", "inherits : function (x, what, which = FALSE)  "],
    ["integer(", "integer : function (length = 0L)  "],
    ["interaction(", "interaction : function (..., drop = FALSE, sep = '.', lex.order = FALSE)  "],
    ["interactive(", "interactive : function ()  "],
    ["intersect(", "intersect : function (x, y)  "],
    ["intToBits(", "intToBits : function (x)  "],
    ["intToUtf8(", "intToUtf8 : function (x, multiple = FALSE, allow_surrogate_pairs = FALSE)  "],
    ["inverse.rle(", "inverse.rle : function (x, ...)  "],
    ["invisible(", "invisible : function (x)  "],
    ["invokeRestart(", "invokeRestart : function (r, ...)  "],
    ["invokeRestartInteractively(", "invokeRestartInteractively : function (r)  "],
    ["is.array(", "is.array : function (x)  "],
    ["is.atomic(", "is.atomic : function (x)  "],
    ["is.call(", "is.call : function (x)  "],
    ["is.character(", "is.character : function (x)  "],
    ["is.complex(", "is.complex : function (x)  "],
    ["is.data.frame(", "is.data.frame : function (x)  "],
    ["is.double(", "is.double : function (x)  "],
    ["is.element(", "is.element : function (el, set)  "],
    ["is.environment(", "is.environment : function (x)  "],
    ["is.expression(", "is.expression : function (x)  "],
    ["is.factor(", "is.factor : function (x)  "],
    ["is.finite(", "is.finite : function (x)  "],
    ["is.function(", "is.function : function (x)  "],
    ["is.infinite(", "is.infinite : function (x)  "],
    ["is.integer(", "is.integer : function (x)  "],
    ["is.language(", "is.language : function (x)  "],
    ["is.list(", "is.list : function (x)  "],
    ["is.loaded(", "is.loaded : function (symbol, PACKAGE = '', type = '')  "],
    ["is.logical(", "is.logical : function (x)  "],
    ["is.matrix(", "is.matrix : function (x)  "],
    ["is.na(", "is.na : function (x)  "],
    ["is.na.data.frame(", "is.na.data.frame : function (x)  "],
    ["is.na.numeric_version(", "is.na.numeric_version : function (x)  "],
    ["is.na.POSIXlt(", "is.na.POSIXlt : function (x)  "],
    ["is.na<-(", "is.na<- : function (x, value)  "],
    ["is.na<-.default(", "is.na<-.default : function (x, value)  "],
    ["is.na<-.factor(", "is.na<-.factor : function (x, value)  "],
    ["is.na<-.numeric_version(", "is.na<-.numeric_version : function (x, value)  "],
    ["is.name(", "is.name : function (x)  "],
    ["is.nan(", "is.nan : function (x)  "],
    ["is.null(", "is.null : function (x)  "],
    ["is.numeric(", "is.numeric : function (x)  "],
    ["is.numeric_version(", "is.numeric_version : function (x)  "],
    ["is.numeric.Date(", "is.numeric.Date : function (x)  "],
    ["is.numeric.difftime(", "is.numeric.difftime : function (x)  "],
    ["is.numeric.POSIXt(", "is.numeric.POSIXt : function (x)  "],
    ["is.object(", "is.object : function (x)  "],
    ["is.ordered(", "is.ordered : function (x)  "],
    ["is.package_version(", "is.package_version : function (x)  "],
    ["is.pairlist(", "is.pairlist : function (x)  "],
    ["is.primitive(", "is.primitive : function (x)  "],
    ["is.qr(", "is.qr : function (x)  "],
    ["is.R(", "is.R : function ()  "],
    ["is.raw(", "is.raw : function (x)  "],
    ["is.recursive(", "is.recursive : function (x)  "],
    ["is.single(", "is.single : function (x)  "],
    ["is.symbol(", "is.symbol : function (x)  "],
    ["is.table(", "is.table : function (x)  "],
    ["is.unsorted(", "is.unsorted : function (x, na.rm = FALSE, strictly = FALSE)  "],
    ["is.vector(", "is.vector : function (x, mode = 'any')  "],
    ["isatty(", "isatty : function (con)  "],
    ["isBaseNamespace(", "isBaseNamespace : function (ns)  "],
    ["isdebugged(", "isdebugged : function (fun, signature = NULL)  "],
    ["isFALSE(", "isFALSE : function (x)  "],
    ["isIncomplete(", "isIncomplete : function (con)  "],
    ["isNamespace(", "isNamespace : function (ns)  "],
    ["isNamespaceLoaded(", "isNamespaceLoaded : function (name)  "],
    ["ISOdate(", "ISOdate : function (year, month, day, hour = 12, min = 0, sec = 0, tz = 'GMT')  "],
    ["ISOdatetime(", "ISOdatetime : function (year, month, day, hour, min, sec, tz = '')  "],
    ["isOpen(", "isOpen : function (con, rw = '')  "],
    ["isRestart(", "isRestart : function (x)  "],
    ["isS4(", "isS4 : function (object)  "],
    ["isSeekable(", "isSeekable : function (con)  "],
    ["isSymmetric(", "isSymmetric : function (object, ...)  "],
    ["isSymmetric.matrix(", "isSymmetric.matrix : function (object, tol = 100 * .Machine$double.eps, tol1 = 8 * tol, ...)  "],
    ["isTRUE(", "isTRUE : function (x)  "],
    ["jitter(", "jitter : function (x, factor = 1, amount = NULL)  "],
    ["julian(", "julian : function (x, ...)  "],
    ["julian.Date(", "julian.Date : function (x, origin = as.Date('1970-01-01'), ...)  "],
    ["julian.POSIXt(", "julian.POSIXt : function (x, origin = as.POSIXct('1970-01-01', tz = 'GMT'), ...)  "],
    ["kappa(", "kappa : function (z, ...)  "],
    ["kappa.default(", "kappa.default : function (z, exact = FALSE, norm = NULL, method = c('qr', 'direct'), ...)  "],
    ["kappa.lm(", "kappa.lm : function (z, ...)  "],
    ["kappa.qr(", "kappa.qr : function (z, ...)  "],
    ["kronecker(", "kronecker : function (X, Y, FUN = '*', make.dimnames = FALSE, ...)  "],
    ["l10n_info(", "l10n_info : function ()  "],
    ["La_library(", "La_library : function ()  "],
    ["La_version(", "La_version : function ()  "],
    ["La.svd(", "La.svd : function (x, nu = min(n, p), nv = min(n, p))  "],
    ["labels(", "labels : function (object, ...)  "],
    ["labels.default(", "labels.default : function (object, ...)  "],
    ["lapply(", "lapply : function (X, FUN, ...)  "],
    ["lazyLoad(", "lazyLoad : function (filebase, envir = parent.frame(), filter)  "],
    ["lazyLoadDBexec(", "lazyLoadDBexec : function (filebase, fun, filter)  "],
    ["lazyLoadDBfetch(", "lazyLoadDBfetch : function (key, file, compressed, hook)  "],
    ["lbeta(", "lbeta : function (a, b)  "],
    ["lchoose(", "lchoose : function (n, k)  "],
    ["length(", "length : function (x)  "],
    ["length.POSIXlt(", "length.POSIXlt : function (x)  "],
    ["length<-(", "length<- : function (x, value)  "],
    ["length<-.Date(", "length<-.Date : function (x, value)  "],
    ["length<-.difftime(", "length<-.difftime : function (x, value)  "],
    ["length<-.factor(", "length<-.factor : function (x, value)  "],
    ["length<-.POSIXct(", "length<-.POSIXct : function (x, value)  "],
    ["length<-.POSIXlt(", "length<-.POSIXlt : function (x, value)  "],
    ["lengths(", "lengths : function (x, use.names = TRUE)  "],
    ["levels(", "levels : function (x)  "],
    ["levels.default(", "levels.default : function (x)  "],
    ["levels<-(", "levels<- : function (x, value)  "],
    ["levels<-.factor(", "levels<-.factor : function (x, value)  "],
    ["lfactorial(", "lfactorial : function (x)  "],
    ["lgamma(", "lgamma : function (x)  "],
    ["libcurlVersion(", "libcurlVersion : function ()  "],
    ["library(", "library : function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE, logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE, verbose = getOption('verbose'))  "],
    ["library.dynam(", "library.dynam : function (chname, package, lib.loc, verbose = getOption('verbose'), file.ext = .Platform$dynlib.ext, ...)  "],
    ["library.dynam.unload(", "library.dynam.unload : function (chname, libpath, verbose = getOption('verbose'), file.ext = .Platform$dynlib.ext)  "],
    ["licence(", "licence : function ()  "],
    ["license(", "license : function ()  "],
    ["list(", "list : function (...)  "],
    ["list.dirs(", "list.dirs : function (path = '.', full.names = TRUE, recursive = TRUE)  "],
    ["list.files(", "list.files : function (path = '.', pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)  "],
    ["list2env(", "list2env : function (x, envir = NULL, parent = parent.frame(), hash = (length(x) > 100), size = max(29L, length(x)))  "],
    ["load(", "load : function (file, envir = parent.frame(), verbose = FALSE)  "],
    ["loadedNamespaces(", "loadedNamespaces : function ()  "],
    ["loadingNamespaceInfo(", "loadingNamespaceInfo : function ()  "],
    ["loadNamespace(", "loadNamespace : function (package, lib.loc = NULL, keep.source = getOption('keep.source.pkgs'), partial = FALSE, versionCheck = NULL)  "],
    ["local(", "local : function (expr, envir = new.env())  "],
    ["lockBinding(", "lockBinding : function (sym, env)  "],
    ["lockEnvironment(", "lockEnvironment : function (env, bindings = FALSE)  "],
    ["log(", "log : function (x, base = exp(1))  "],
    ["log10(", "log10 : function (x)  "],
    ["log1p(", "log1p : function (x)  "],
    ["log2(", "log2 : function (x)  "],
    ["logb(", "logb : function (x, base = exp(1))  "],
    ["logical(", "logical : function (length = 0L)  "],
    ["lower.tri(", "lower.tri : function (x, diag = FALSE)  "],
    ["ls(", "ls : function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE)  "],
    ["make.names(", "make.names : function (names, unique = FALSE, allow_ = TRUE)  "],
    ["make.unique(", "make.unique : function (names, sep = '.')  "],
    ["makeActiveBinding(", "makeActiveBinding : function (sym, fun, env)  "],
    ["Map(", "Map : function (f, ...)  "],
    ["mapply(", "mapply : function (FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)  "],
    ["margin.table(", "margin.table : function (x, margin = NULL)  "],
    ["mat.or.vec(", "mat.or.vec : function (nr, nc)  "],
    ["match(", "match : function (x, table, nomatch = NA_integer_, incomparables = NULL)  "],
    ["match.arg(", "match.arg : function (arg, choices, several.ok = FALSE)  "],
    ["match.call(", "match.call : function (definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L))  "],
    ["match.fun(", "match.fun : function (FUN, descend = TRUE)  "],
    ["Math.data.frame(", "Math.data.frame : function (x, ...)  "],
    ["Math.Date(", "Math.Date : function (x, ...)  "],
    ["Math.difftime(", "Math.difftime : function (x, ...)  "],
    ["Math.factor(", "Math.factor : function (x, ...)  "],
    ["Math.POSIXt(", "Math.POSIXt : function (x, ...)  "],
    ["matrix(", "matrix : function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)  "],
    ["max(", "max : function (..., na.rm = FALSE)  "],
    ["max.col(", "max.col : function (m, ties.method = c('random', 'first', 'last'))  "],
    ["mean(", "mean : function (x, ...)  "],
    ["mean.Date(", "mean.Date : function (x, ...)  "],
    ["mean.default(", "mean.default : function (x, trim = 0, na.rm = FALSE, ...)  "],
    ["mean.difftime(", "mean.difftime : function (x, ...)  "],
    ["mean.POSIXct(", "mean.POSIXct : function (x, ...)  "],
    ["mean.POSIXlt(", "mean.POSIXlt : function (x, ...)  "],
    ["mem.limits(", "mem.limits : function (nsize = NA, vsize = NA)  "],
    ["memCompress(", "memCompress : function (from, type = c('gzip', 'bzip2', 'xz', 'none'))  "],
    ["memDecompress(", "memDecompress : function (from, type = c('unknown', 'gzip', 'bzip2', 'xz', 'none'), asChar = FALSE)  "],
    ["memory.profile(", "memory.profile : function ()  "],
    ["merge(", "merge : function (x, y, ...)  "],
    ["merge.data.frame(", "merge.data.frame : function (x, y, by = intersect(names(x), names(y)), by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all, sort = TRUE, suffixes = c('.x', '.y'), no.dups = TRUE, incomparables = NULL, ...)  "],
    ["merge.default(", "merge.default : function (x, y, ...)  "],
    ["message(", "message : function (..., domain = NULL, appendLF = TRUE)  "],
    ["mget(", "mget : function (x, envir = as.environment(-1L), mode = 'any', ifnotfound, inherits = FALSE)  "],
    ["min(", "min : function (..., na.rm = FALSE)  "],
    ["missing(", "missing : function (x)  "],
    ["Mod(", "Mod : function (z)  "],
    ["mode(", "mode : function (x)  "],
    ["mode<-(", "mode<- : function (x, value)  "],
    ["months(", "months : function (x, abbreviate)  "],
    ["months.Date(", "months.Date : function (x, abbreviate = FALSE)  "],
    ["months.POSIXt(", "months.POSIXt : function (x, abbreviate = FALSE)  "],
    ["mostattributes<-(", "mostattributes<- : function (obj, value)  "],
    ["names(", "names : function (x)  "],
    ["names.POSIXlt(", "names.POSIXlt : function (x)  "],
    ["names<-(", "names<- : function (x, value)  "],
    ["names<-.POSIXlt(", "names<-.POSIXlt : function (x, value)  "],
    ["namespaceExport(", "namespaceExport : function (ns, vars)  "],
    ["namespaceImport(", "namespaceImport : function (self, ..., from = NULL, except = character(0L))  "],
    ["namespaceImportClasses(", "namespaceImportClasses : function (self, ns, vars, from = NULL)  "],
    ["namespaceImportFrom(", "namespaceImportFrom : function (self, ns, vars, generics, packages, from = 'non-package environment', except = character(0L))  "],
    ["namespaceImportMethods(", "namespaceImportMethods : function (self, ns, vars, from = NULL)  "],
    ["nargs(", "nargs : function ()  "],
    ["nchar(", "nchar : function (x, type = 'chars', allowNA = FALSE, keepNA = NA)  "],
    ["ncol(", "ncol : function (x)  "],
    ["NCOL(", "NCOL : function (x)  "],
    ["Negate(", "Negate : function (f)  "],
    ["new.env(", "new.env : function (hash = TRUE, parent = parent.frame(), size = 29L)  "],
    ["next(", "next : .Primitive('next') "],
    ["NextMethod(", "NextMethod : function (generic = NULL, object = NULL, ...)  "],
    ["ngettext(", "ngettext : function (n, msg1, msg2, domain = NULL)  "],
    ["nlevels(", "nlevels : function (x)  "],
    ["noquote(", "noquote : function (obj, right = FALSE)  "],
    ["norm(", "norm : function (x, type = c('O', 'I', 'F', 'M', '2'))  "],
    ["normalizePath(", "normalizePath : function (path, winslash = '\\', mustWork = NA)  "],
    ["nrow(", "nrow : function (x)  "],
    ["NROW(", "NROW : function (x)  "],
    ["numeric(", "numeric : function (length = 0L)  "],
    ["numeric_version(", "numeric_version : function (x, strict = TRUE)  "],
    ["nzchar(", "nzchar : function (x, keepNA = FALSE)  "],
    ["objects(", "objects : function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE)  "],
    ["oldClass(", "oldClass : function (x)  "],
    ["oldClass<-(", "oldClass<- : function (x, value)  "],
    ["OlsonNames(", "OlsonNames : function (tzdir = NULL)  "],
    ["on.exit(", "on.exit : function (expr = NULL, add = FALSE, after = TRUE)  "],
    ["open(", "open : function (con, ...)  "],
    ["open.connection(", "open.connection : function (con, open = 'r', blocking = TRUE, ...)  "],
    ["open.srcfile(", "open.srcfile : function (con, line, ...)  "],
    ["open.srcfilealias(", "open.srcfilealias : function (con, line, ...)  "],
    ["open.srcfilecopy(", "open.srcfilecopy : function (con, line, ...)  "],
    ["Ops.data.frame(", "Ops.data.frame : function (e1, e2 = NULL)  "],
    ["Ops.Date(", "Ops.Date : function (e1, e2)  "],
    ["Ops.difftime(", "Ops.difftime : function (e1, e2)  "],
    ["Ops.factor(", "Ops.factor : function (e1, e2)  "],
    ["Ops.numeric_version(", "Ops.numeric_version : function (e1, e2)  "],
    ["Ops.ordered(", "Ops.ordered : function (e1, e2)  "],
    ["Ops.POSIXt(", "Ops.POSIXt : function (e1, e2)  "],
    ["options(", "options : function (...)  "],
    ["order(", "order : function (..., na.last = TRUE, decreasing = FALSE, method = c('auto', 'shell', 'radix'))  "],
    ["ordered(", "ordered : function (x, ...)  "],
    ["outer(", "outer : function (X, Y, FUN = '*', ...)  "],
    ["package_version(", "package_version : function (x, strict = TRUE)  "],
    ["packageEvent(", "packageEvent : function (pkgname, event = c('onLoad', 'attach', 'detach', 'onUnload'))  "],
    ["packageHasNamespace(", "packageHasNamespace : function (package, package.lib)  "],
    ["packageStartupMessage(", "packageStartupMessage : function (..., domain = NULL, appendLF = TRUE)  "],
    ["packBits(", "packBits : function (x, type = c('raw', 'integer'))  "],
    ["pairlist(", "pairlist : function (...)  "],
    ["parent.env(", "parent.env : function (env)  "],
    ["parent.env<-(", "parent.env<- : function (env, value)  "],
    ["parent.frame(", "parent.frame : function (n = 1)  "],
    ["parse(", "parse : function (file = '', n = NULL, text = NULL, prompt = '?', keep.source = getOption('keep.source'), srcfile = NULL, encoding = 'unknown')  "],
    ["parseNamespaceFile(", "parseNamespaceFile : function (package, package.lib, mustExist = TRUE)  "],
    ["paste(", "paste : function (..., sep = ' ', collapse = NULL)  "],
    ["paste0(", "paste0 : function (..., collapse = NULL)  "],
    ["path.expand(", "path.expand : function (path)  "],
    ["path.package(", "path.package : function (package = NULL, quiet = FALSE)  "],
    ["pcre_config(", "pcre_config : function ()  "],
    ["pipe(", "pipe : function (description, open = '', encoding = getOption('encoding'))  "],
    ["pmatch(", "pmatch : function (x, table, nomatch = NA_integer_, duplicates.ok = FALSE)  "],
    ["pmax(", "pmax : function (..., na.rm = FALSE)  "],
    ["pmax.int(", "pmax.int : function (..., na.rm = FALSE)  "],
    ["pmin(", "pmin : function (..., na.rm = FALSE)  "],
    ["pmin.int(", "pmin.int : function (..., na.rm = FALSE)  "],
    ["polyroot(", "polyroot : function (z)  "],
    ["pos.to.env(", "pos.to.env : function (x)  "],
    ["Position(", "Position : function (f, x, right = FALSE, nomatch = NA_integer_)  "],
    ["pretty(", "pretty : function (x, ...)  "],
    ["pretty.default(", "pretty.default : function (x, n = 5, min.n = n%/%3, shrink.sml = 0.75, high.u.bias = 1.5, u5.bias = 0.5 + 1.5 * high.u.bias, eps.correct = 0, ...)  "],
    ["prettyNum(", "prettyNum : function (x, big.mark = '', big.interval = 3L, small.mark = '', small.interval = 5L, decimal.mark = getOption('OutDec'), input.d.mark = decimal.mark, preserve.width = c('common', 'individual', 'none'), zero.print = NULL, drop0trailing = FALSE, is.cmplx = NA, ...)  "],
    ["print(", "print : function (x, ...)  "],
    ["print.AsIs(", "print.AsIs : function (x, ...)  "],
    ["print.by(", "print.by : function (x, ..., vsep)  "],
    ["print.condition(", "print.condition : function (x, ...)  "],
    ["print.connection(", "print.connection : function (x, ...)  "],
    ["print.data.frame(", "print.data.frame : function (x, ..., digits = NULL, quote = FALSE, right = TRUE, row.names = TRUE, max = NULL)  "],
    ["print.Date(", "print.Date : function (x, max = NULL, ...)  "],
    ["print.default(", "print.default : function (x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, right = FALSE, max = NULL, useSource = TRUE, ...)  "],
    ["print.difftime(", "print.difftime : function (x, digits = getOption('digits'), ...)  "],
    ["print.Dlist(", "print.Dlist : function (x, ...)  "],
    ["print.DLLInfo(", "print.DLLInfo : function (x, ...)  "],
    ["print.DLLInfoList(", "print.DLLInfoList : function (x, ...)  "],
    ["print.DLLRegisteredRoutines(", "print.DLLRegisteredRoutines : function (x, ...)  "],
    ["print.eigen(", "print.eigen : function (x, ...)  "],
    ["print.factor(", "print.factor : function (x, quote = FALSE, max.levels = NULL, width = getOption('width'), ...)  "],
    ["print.function(", "print.function : function (x, useSource = TRUE, ...)  "],
    ["print.hexmode(", "print.hexmode : function (x, ...)  "],
    ["print.libraryIQR(", "print.libraryIQR : function (x, ...)  "],
    ["print.listof(", "print.listof : function (x, ...)  "],
    ["print.NativeRoutineList(", "print.NativeRoutineList : function (x, ...)  "],
    ["print.noquote(", "print.noquote : function (x, quote = FALSE, right = FALSE, ...)  "],
    ["print.numeric_version(", "print.numeric_version : function (x, ...)  "],
    ["print.octmode(", "print.octmode : function (x, ...)  "],
    ["print.packageInfo(", "print.packageInfo : function (x, ...)  "],
    ["print.POSIXct(", "print.POSIXct : function (x, tz = '', usetz = TRUE, max = NULL, ...)  "],
    ["print.POSIXlt(", "print.POSIXlt : function (x, tz = '', usetz = TRUE, max = NULL, ...)  "],
    ["print.proc_time(", "print.proc_time : function (x, ...)  "],
    ["print.restart(", "print.restart : function (x, ...)  "],
    ["print.rle(", "print.rle : function (x, digits = getOption('digits'), prefix = '', ...)  "],
    ["print.simple.list(", "print.simple.list : function (x, ...)  "],
    ["print.srcfile(", "print.srcfile : function (x, ...)  "],
    ["print.srcref(", "print.srcref : function (x, useSource = TRUE, ...)  "],
    ["print.summary.table(", "print.summary.table : function (x, digits = max(1L, getOption('digits') - 3L), ...)  "],
    ["print.summary.warnings(", "print.summary.warnings : function (x, ...)  "],
    ["print.summaryDefault(", "print.summaryDefault : function (x, digits = max(3L, getOption('digits') - 3L), ...)  "],
    ["print.table(", "print.table : function (x, digits = getOption('digits'), quote = FALSE, na.print = '', zero.print = '0', right = is.numeric(x) || is.complex(x), justify = 'none', ...)  "],
    ["print.warnings(", "print.warnings : function (x, tags, header = ngettext(n, 'Warning message:\n', 'Warning messages:\n'), ...)  "],
    ["prmatrix(", "prmatrix : function (x, rowlab = dn[[1]], collab = dn[[2]], quote = TRUE, right = FALSE, na.print = NULL, ...)  "],
    ["proc.time(", "proc.time : function ()  "],
    ["prod(", "prod : function (..., na.rm = FALSE)  "],
    ["prop.table(", "prop.table : function (x, margin = NULL)  "],
    ["provideDimnames(", "provideDimnames : function (x, sep = '', base = list(LETTERS), unique = TRUE)  "],
    ["psigamma(", "psigamma : function (x, deriv = 0L)  "],
    ["pushBack(", "pushBack : function (data, connection, newLine = TRUE, encoding = c('', 'bytes', 'UTF-8'))  "],
    ["pushBackLength(", "pushBackLength : function (connection)  "],
    ["q(", "q : function (save = 'default', status = 0, runLast = TRUE)  "],
    ["qr(", "qr : function (x, ...)  "],
    ["qr.coef(", "qr.coef : function (qr, y)  "],
    ["qr.default(", "qr.default : function (x, tol = 1e-07, LAPACK = FALSE, ...)  "],
    ["qr.fitted(", "qr.fitted : function (qr, y, k = qr$rank)  "],
    ["qr.Q(", "qr.Q : function (qr, complete = FALSE, Dvec)  "],
    ["qr.qty(", "qr.qty : function (qr, y)  "],
    ["qr.qy(", "qr.qy : function (qr, y)  "],
    ["qr.R(", "qr.R : function (qr, complete = FALSE)  "],
    ["qr.resid(", "qr.resid : function (qr, y)  "],
    ["qr.solve(", "qr.solve : function (a, b, tol = 1e-07)  "],
    ["qr.X(", "qr.X : function (qr, complete = FALSE, ncol = if (complete) nrow(R) else min(dim(R)))  "],
    ["quarters(", "quarters : function (x, abbreviate)  "],
    ["quarters.Date(", "quarters.Date : function (x, ...)  "],
    ["quarters.POSIXt(", "quarters.POSIXt : function (x, ...)  "],
    ["quit(", "quit : function (save = 'default', status = 0, runLast = TRUE)  "],
    ["quote(", "quote : function (expr)  "],
    ["R_system_version(", "R_system_version : function (x, strict = TRUE)  "],
    ["R.home(", "R.home : function (component = 'home')  "],
    ["R.Version(", "R.Version : function ()  "],
    ["range(", "range : function (..., na.rm = FALSE)  "],
    ["range.default(", "range.default : function (..., na.rm = FALSE, finite = FALSE)  "],
    ["rank(", "rank : function (x, na.last = TRUE, ties.method = c('average', 'first', 'last', 'random', 'max', 'min'))  "],
    ["rapply(", "rapply : function (object, f, classes = 'ANY', deflt = NULL, how = c('unlist', 'replace', 'list'), ...)  "],
    ["raw(", "raw : function (length = 0L)  "],
    ["rawConnection(", "rawConnection : function (object, open = 'r')  "],
    ["rawConnectionValue(", "rawConnectionValue : function (con)  "],
    ["rawShift(", "rawShift : function (x, n)  "],
    ["rawToBits(", "rawToBits : function (x)  "],
    ["rawToChar(", "rawToChar : function (x, multiple = FALSE)  "],
    ["rbind(", "rbind : function (..., deparse.level = 1)  "],
    ["rbind.data.frame(", "rbind.data.frame : function (..., deparse.level = 1, make.row.names = TRUE, stringsAsFactors = default.stringsAsFactors())  "],
    ["rcond(", "rcond : function (x, norm = c('O', 'I', '1'), triangular = FALSE, ...)  "],
    ["Re(", "Re : function (z)  "],
    ["read.dcf(", "read.dcf : function (file, fields = NULL, all = FALSE, keep.white = NULL)  "],
    ["readBin(", "readBin : function (con, what, n = 1L, size = NA_integer_, signed = TRUE, endian = .Platform$endian)  "],
    ["readChar(", "readChar : function (con, nchars, useBytes = FALSE)  "],
    ["readline(", "readline : function (prompt = '')  "],
    ["readLines(", "readLines : function (con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = 'unknown', skipNul = FALSE)  "],
    ["readRDS(", "readRDS : function (file, refhook = NULL)  "],
    ["readRenviron(", "readRenviron : function (path)  "],
    ["Recall(", "Recall : function (...)  "],
    ["Reduce(", "Reduce : function (f, x, init, right = FALSE, accumulate = FALSE)  "],
    ["reg.finalizer(", "reg.finalizer : function (e, f, onexit = FALSE)  "],
    ["regexec(", "regexec : function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["regexpr(", "regexpr : function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["registerS3method(", "registerS3method : function (genname, class, method, envir = parent.frame())  "],
    ["registerS3methods(", "registerS3methods : function (info, package, env)  "],
    ["regmatches(", "regmatches : function (x, m, invert = FALSE)  "],
    ["regmatches<-(", "regmatches<- : function (x, m, invert = FALSE, value)  "],
    ["remove(", "remove : function (..., list = character(), pos = -1, envir = as.environment(pos), inherits = FALSE)  "],
    ["removeTaskCallback(", "removeTaskCallback : function (id)  "],
    ["rep(", "rep : function (x, ...)  "],
    ["rep_len(", "rep_len : function (x, length.out)  "],
    ["rep.Date(", "rep.Date : function (x, ...)  "],
    ["rep.factor(", "rep.factor : function (x, ...)  "],
    ["rep.int(", "rep.int : function (x, times)  "],
    ["rep.numeric_version(", "rep.numeric_version : function (x, ...)  "],
    ["rep.POSIXct(", "rep.POSIXct : function (x, ...)  "],
    ["rep.POSIXlt(", "rep.POSIXlt : function (x, ...)  "],
    ["repeat(", "repeat : .Primitive('repeat') "],
    ["replace(", "replace : function (x, list, values)  "],
    ["replicate(", "replicate : function (n, expr, simplify = 'array')  "],
    ["require(", "require : function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE)  "],
    ["requireNamespace(", "requireNamespace : function (package, ..., quietly = FALSE)  "],
    ["restartDescription(", "restartDescription : function (r)  "],
    ["restartFormals(", "restartFormals : function (r)  "],
    ["retracemem(", "retracemem : function (x, previous = NULL)  "],
    ["return(", "return : .Primitive('return') "],
    ["returnValue(", "returnValue : function (default = NULL)  "],
    ["rev(", "rev : function (x)  "],
    ["rev.default(", "rev.default : function (x)  "],
    ["rle(", "rle : function (x)  "],
    ["rm(", "rm : function (..., list = character(), pos = -1, envir = as.environment(pos), inherits = FALSE)  "],
    ["RNGkind(", "RNGkind : function (kind = NULL, normal.kind = NULL)  "],
    ["RNGversion(", "RNGversion : function (vstr)  "],
    ["round(", "round : function (x, digits = 0)  "],
    ["round.Date(", "round.Date : function (x, ...)  "],
    ["round.POSIXt(", "round.POSIXt : function (x, units = c('secs', 'mins', 'hours', 'days', 'months', 'years'))  "],
    ["row(", "row : function (x, as.factor = FALSE)  "],
    ["row.names(", "row.names : function (x)  "],
    ["row.names.data.frame(", "row.names.data.frame : function (x)  "],
    ["row.names.default(", "row.names.default : function (x)  "],
    ["row.names<-(", "row.names<- : function (x, value)  "],
    ["row.names<-.data.frame(", "row.names<-.data.frame : function (x, value)  "],
    ["row.names<-.default(", "row.names<-.default : function (x, value)  "],
    ["rowMeans(", "rowMeans : function (x, na.rm = FALSE, dims = 1L)  "],
    ["rownames(", "rownames : function (x, do.NULL = TRUE, prefix = 'row')  "],
    ["rownames<-(", "rownames<- : function (x, value)  "],
    ["rowsum(", "rowsum : function (x, group, reorder = TRUE, ...)  "],
    ["rowsum.data.frame(", "rowsum.data.frame : function (x, group, reorder = TRUE, na.rm = FALSE, ...)  "],
    ["rowsum.default(", "rowsum.default : function (x, group, reorder = TRUE, na.rm = FALSE, ...)  "],
    ["rowSums(", "rowSums : function (x, na.rm = FALSE, dims = 1L)  "],
    ["sample(", "sample : function (x, size, replace = FALSE, prob = NULL)  "],
    ["sample.int(", "sample.int : function (n, size = n, replace = FALSE, prob = NULL, useHash = (!replace && is.null(prob) && size <= n/2 && n > 1e+07))  "],
    ["sapply(", "sapply : function (X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)  "],
    ["save(", "save : function (..., list = character(), file = stop(''file' must be specified'), ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), compression_level, eval.promises = TRUE, precheck = TRUE)  "],
    ["save.image(", "save.image : function (file = '.RData', version = NULL, ascii = FALSE, compress = !ascii, safe = TRUE)  "],
    ["saveRDS(", "saveRDS : function (object, file = '', ascii = FALSE, version = NULL, compress = TRUE, refhook = NULL)  "],
    ["scale(", "scale : function (x, center = TRUE, scale = TRUE)  "],
    ["scale.default(", "scale.default : function (x, center = TRUE, scale = TRUE)  "],
    ["scan(", "scan : function (file = '', what = double(), nmax = -1L, n = -1L, sep = '', quote = if (identical(sep, '\n')) '' else ''\'', dec = '.', skip = 0L, nlines = 0L, na.strings = 'NA', flush = FALSE, fill = FALSE, strip.white = FALSE, quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE, comment.char = '', allowEscapes = FALSE, fileEncoding = '', encoding = 'unknown', text, skipNul = FALSE)  "],
    ["search(", "search : function ()  "],
    ["searchpaths(", "searchpaths : function ()  "],
    ["seek(", "seek : function (con, ...)  "],
    ["seek.connection(", "seek.connection : function (con, where = NA, origin = 'start', rw = '', ...)  "],
    ["seq(", "seq : function (...)  "],
    ["seq_along(", "seq_along : function (along.with)  "],
    ["seq_len(", "seq_len : function (length.out)  "],
    ["seq.Date(", "seq.Date : function (from, to, by, length.out = NULL, along.with = NULL, ...)  "],
    ["seq.default(", "seq.default : function (from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...)  "],
    ["seq.int(", "seq.int : function (from, to, by, length.out, along.with, ...)  "],
    ["seq.POSIXt(", "seq.POSIXt : function (from, to, by, length.out = NULL, along.with = NULL, ...)  "],
    ["sequence(", "sequence : function (nvec)  "],
    ["serialize(", "serialize : function (object, connection, ascii = FALSE, xdr = TRUE, version = NULL, refhook = NULL)  "],
    ["set.seed(", "set.seed : function (seed, kind = NULL, normal.kind = NULL)  "],
    ["setdiff(", "setdiff : function (x, y)  "],
    ["setequal(", "setequal : function (x, y)  "],
    ["setHook(", "setHook : function (hookName, value, action = c('append', 'prepend', 'replace'))  "],
    ["setNamespaceInfo(", "setNamespaceInfo : function (ns, which, val)  "],
    ["setSessionTimeLimit(", "setSessionTimeLimit : function (cpu = Inf, elapsed = Inf)  "],
    ["setTimeLimit(", "setTimeLimit : function (cpu = Inf, elapsed = Inf, transient = FALSE)  "],
    ["setwd(", "setwd : function (dir)  "],
    ["showConnections(", "showConnections : function (all = FALSE)  "],
    ["shQuote(", "shQuote : function (string, type = c('sh', 'csh', 'cmd', 'cmd2'))  "],
    ["sign(", "sign : function (x)  "],
    ["signalCondition(", "signalCondition : function (cond)  "],
    ["signif(", "signif : function (x, digits = 6)  "],
    ["simpleCondition(", "simpleCondition : function (message, call = NULL)  "],
    ["simpleError(", "simpleError : function (message, call = NULL)  "],
    ["simpleMessage(", "simpleMessage : function (message, call = NULL)  "],
    ["simpleWarning(", "simpleWarning : function (message, call = NULL)  "],
    ["simplify2array(", "simplify2array : function (x, higher = TRUE)  "],
    ["sin(", "sin : function (x)  "],
    ["single(", "single : function (length = 0L)  "],
    ["sinh(", "sinh : function (x)  "],
    ["sink(", "sink : function (file = NULL, append = FALSE, type = c('output', 'message'), split = FALSE)  "],
    ["sink.number(", "sink.number : function (type = c('output', 'message'))  "],
    ["sinpi(", "sinpi : function (x)  "],
    ["slice.index(", "slice.index : function (x, MARGIN)  "],
    ["socketConnection(", "socketConnection : function (host = 'localhost', port, server = FALSE, blocking = FALSE, open = 'a+', encoding = getOption('encoding'), timeout = getOption('timeout'))  "],
    ["socketSelect(", "socketSelect : function (socklist, write = FALSE, timeout = NULL)  "],
    ["solve(", "solve : function (a, b, ...)  "],
    ["solve.default(", "solve.default : function (a, b, tol = .Machine$double.eps, LINPACK = FALSE, ...)  "],
    ["solve.qr(", "solve.qr : function (a, b, ...)  "],
    ["sort(", "sort : function (x, decreasing = FALSE, ...)  "],
    ["sort.default(", "sort.default : function (x, decreasing = FALSE, na.last = NA, ...)  "],
    ["sort.int(", "sort.int : function (x, partial = NULL, na.last = NA, decreasing = FALSE, method = c('auto', 'shell', 'quick', 'radix'), index.return = FALSE)  "],
    ["sort.list(", "sort.list : function (x, partial = NULL, na.last = TRUE, decreasing = FALSE, method = c('auto', 'shell', 'quick', 'radix'))  "],
    ["sort.POSIXlt(", "sort.POSIXlt : function (x, decreasing = FALSE, na.last = NA, ...)  "],
    ["source(", "source : function (file, local = FALSE, echo = verbose, print.eval = echo, exprs, spaced = use_file, verbose = getOption('verbose'), prompt.echo = getOption('prompt'), max.deparse.length = 150, width.cutoff = 60L, deparseCtrl = 'showAttributes', chdir = FALSE, encoding = getOption('encoding'), continue.echo = getOption('continue'), skip.echo = 0, keep.source = getOption('keep.source'))  "],
    ["split(", "split : function (x, f, drop = FALSE, ...)  "],
    ["split.data.frame(", "split.data.frame : function (x, f, drop = FALSE, ...)  "],
    ["split.Date(", "split.Date : function (x, f, drop = FALSE, ...)  "],
    ["split.default(", "split.default : function (x, f, drop = FALSE, sep = '.', lex.order = FALSE, ...)  "],
    ["split.POSIXct(", "split.POSIXct : function (x, f, drop = FALSE, ...)  "],
    ["split<-(", "split<- : function (x, f, drop = FALSE, ..., value)  "],
    ["split<-.data.frame(", "split<-.data.frame : function (x, f, drop = FALSE, ..., value)  "],
    ["split<-.default(", "split<-.default : function (x, f, drop = FALSE, ..., value)  "],
    ["sprintf(", "sprintf : function (fmt, ...)  "],
    ["sqrt(", "sqrt : function (x)  "],
    ["sQuote(", "sQuote : function (x)  "],
    ["srcfile(", "srcfile : function (filename, encoding = getOption('encoding'), Enc = 'unknown')  "],
    ["srcfilealias(", "srcfilealias : function (filename, srcfile)  "],
    ["srcfilecopy(", "srcfilecopy : function (filename, lines, timestamp = Sys.time(), isFile = FALSE)  "],
    ["srcref(", "srcref : function (srcfile, lloc)  "],
    ["standardGeneric(", "standardGeneric : function (f, fdef)  "],
    ["startsWith(", "startsWith : function (x, prefix)  "],
    ["stderr(", "stderr : function ()  "],
    ["stdin(", "stdin : function ()  "],
    ["stdout(", "stdout : function ()  "],
    ["stop(", "stop : function (..., call. = TRUE, domain = NULL)  "],
    ["stopifnot(", "stopifnot : function (..., exprs, local = TRUE)  "],
    ["storage.mode(", "storage.mode : function (x)  "],
    ["storage.mode<-(", "storage.mode<- : function (x, value)  "],
    ["strftime(", "strftime : function (x, format = '', tz = '', usetz = FALSE, ...)  "],
    ["strptime(", "strptime : function (x, format, tz = '')  "],
    ["strrep(", "strrep : function (x, times)  "],
    ["strsplit(", "strsplit : function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)  "],
    ["strtoi(", "strtoi : function (x, base = 0L)  "],
    ["strtrim(", "strtrim : function (x, width)  "],
    ["structure(", "structure : function (.Data, ...)  "],
    ["strwrap(", "strwrap : function (x, width = 0.9 * getOption('width'), indent = 0, exdent = 0, prefix = '', simplify = TRUE, initial = prefix)  "],
    ["sub(", "sub : function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["subset(", "subset : function (x, ...)  "],
    ["subset.data.frame(", "subset.data.frame : function (x, subset, select, drop = FALSE, ...)  "],
    ["subset.default(", "subset.default : function (x, subset, ...)  "],
    ["subset.matrix(", "subset.matrix : function (x, subset, select, drop = FALSE, ...)  "],
    ["substitute(", "substitute : function (expr, env)  "],
    ["substr(", "substr : function (x, start, stop)  "],
    ["substr<-(", "substr<- : function (x, start, stop, value)  "],
    ["substring(", "substring : function (text, first, last = 1000000L)  "],
    ["substring<-(", "substring<- : function (text, first, last = 1000000L, value)  "],
    ["sum(", "sum : function (..., na.rm = FALSE)  "],
    ["summary(", "summary : function (object, ...)  "],
    ["summary.connection(", "summary.connection : function (object, ...)  "],
    ["summary.data.frame(", "summary.data.frame : function (object, maxsum = 7L, digits = max(3L, getOption('digits') - 3L), ...)  "],
    ["Summary.data.frame(", "Summary.data.frame : function (..., na.rm)  "],
    ["summary.Date(", "summary.Date : function (object, digits = 12L, ...)  "],
    ["Summary.Date(", "Summary.Date : function (..., na.rm)  "],
    ["summary.default(", "summary.default : function (object, ..., digits)  "],
    ["Summary.difftime(", "Summary.difftime : function (..., na.rm)  "],
    ["summary.factor(", "summary.factor : function (object, maxsum = 100L, ...)  "],
    ["Summary.factor(", "Summary.factor : function (..., na.rm)  "],
    ["summary.matrix(", "summary.matrix : function (object, ...)  "],
    ["Summary.numeric_version(", "Summary.numeric_version : function (..., na.rm)  "],
    ["Summary.ordered(", "Summary.ordered : function (..., na.rm)  "],
    ["summary.POSIXct(", "summary.POSIXct : function (object, digits = 15L, ...)  "],
    ["Summary.POSIXct(", "Summary.POSIXct : function (..., na.rm)  "],
    ["summary.POSIXlt(", "summary.POSIXlt : function (object, digits = 15, ...)  "],
    ["Summary.POSIXlt(", "Summary.POSIXlt : function (..., na.rm)  "],
    ["summary.proc_time(", "summary.proc_time : function (object, ...)  "],
    ["summary.srcfile(", "summary.srcfile : function (object, ...)  "],
    ["summary.srcref(", "summary.srcref : function (object, useSource = FALSE, ...)  "],
    ["summary.table(", "summary.table : function (object, ...)  "],
    ["summary.warnings(", "summary.warnings : function (object, ...)  "],
    ["suppressMessages(", "suppressMessages : function (expr)  "],
    ["suppressPackageStartupMessages(", "suppressPackageStartupMessages : function (expr)  "],
    ["suppressWarnings(", "suppressWarnings : function (expr)  "],
    ["suspendInterrupts(", "suspendInterrupts : function (expr)  "],
    ["svd(", "svd : function (x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)  "],
    ["sweep(", "sweep : function (x, MARGIN, STATS, FUN = '-', check.margin = TRUE, ...)  "],
    ["switch(", "switch : function (EXPR, ...)  "],
    ["sys.call(", "sys.call : function (which = 0L)  "],
    ["sys.calls(", "sys.calls : function ()  "],
    ["Sys.chmod(", "Sys.chmod : function (paths, mode = '0777', use_umask = TRUE)  "],
    ["Sys.Date(", "Sys.Date : function ()  "],
    ["sys.frame(", "sys.frame : function (which = 0L)  "],
    ["sys.frames(", "sys.frames : function ()  "],
    ["sys.function(", "sys.function : function (which = 0L)  "],
    ["Sys.getenv(", "Sys.getenv : function (x = NULL, unset = '', names = NA)  "],
    ["Sys.getlocale(", "Sys.getlocale : function (category = 'LC_ALL')  "],
    ["Sys.getpid(", "Sys.getpid : function ()  "],
    ["Sys.glob(", "Sys.glob : function (paths, dirmark = FALSE)  "],
    ["Sys.info(", "Sys.info : function ()  "],
    ["sys.load.image(", "sys.load.image : function (name, quiet)  "],
    ["Sys.localeconv(", "Sys.localeconv : function ()  "],
    ["sys.nframe(", "sys.nframe : function ()  "],
    ["sys.on.exit(", "sys.on.exit : function ()  "],
    ["sys.parent(", "sys.parent : function (n = 1L)  "],
    ["sys.parents(", "sys.parents : function ()  "],
    ["Sys.readlink(", "Sys.readlink : function (paths)  "],
    ["sys.save.image(", "sys.save.image : function (name)  "],
    ["Sys.setenv(", "Sys.setenv : function (...)  "],
    ["Sys.setFileTime(", "Sys.setFileTime : function (path, time)  "],
    ["Sys.setlocale(", "Sys.setlocale : function (category = 'LC_ALL', locale = '')  "],
    ["Sys.sleep(", "Sys.sleep : function (time)  "],
    ["sys.source(", "sys.source : function (file, envir = baseenv(), chdir = FALSE, keep.source = getOption('keep.source.pkgs'), toplevel.env = as.environment(envir))  "],
    ["sys.status(", "sys.status : function ()  "],
    ["Sys.time(", "Sys.time : function ()  "],
    ["Sys.timezone(", "Sys.timezone : function (location = TRUE)  "],
    ["Sys.umask(", "Sys.umask : function (mode = NA)  "],
    ["Sys.unsetenv(", "Sys.unsetenv : function (x)  "],
    ["Sys.which(", "Sys.which : function (names)  "],
    ["system(", "system : function (command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE, wait = TRUE, input = NULL, show.output.on.console = TRUE, minimized = FALSE, invisible = TRUE, timeout = 0)  "],
    ["system.file(", "system.file : function (..., package = 'base', lib.loc = NULL, mustWork = FALSE)  "],
    ["system.time(", "system.time : function (expr, gcFirst = TRUE)  "],
    ["system2(", "system2 : function (command, args = character(), stdout = '', stderr = '', stdin = '', input = NULL, env = character(), wait = TRUE, minimized = FALSE, invisible = TRUE, timeout = 0)  "],
    ["t(", "t : function (x)  "],
    ["t.data.frame(", "t.data.frame : function (x)  "],
    ["t.default(", "t.default : function (x)  "],
    ["table(", "table : function (..., exclude = if (useNA == 'no') c(NA, NaN), useNA = c('no', 'ifany', 'always'), dnn = list.names(...), deparse.level = 1)  "],
    ["tabulate(", "tabulate : function (bin, nbins = max(1L, bin, na.rm = TRUE))  "],
    ["tan(", "tan : function (x)  "],
    ["tanh(", "tanh : function (x)  "],
    ["tanpi(", "tanpi : function (x)  "],
    ["tapply(", "tapply : function (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)  "],
    ["taskCallbackManager(", "taskCallbackManager : function (handlers = list(), registered = FALSE, verbose = FALSE)  "],
    ["tcrossprod(", "tcrossprod : function (x, y = NULL)  "],
    ["tempdir(", "tempdir : function (check = FALSE)  "],
    ["tempfile(", "tempfile : function (pattern = 'file', tmpdir = tempdir(), fileext = '')  "],
    ["testPlatformEquivalence(", "testPlatformEquivalence : function (built, run)  "],
    ["textConnection(", "textConnection : function (object, open = 'r', local = FALSE, encoding = c('', 'bytes', 'UTF-8'))  "],
    ["textConnectionValue(", "textConnectionValue : function (con)  "],
    ["tolower(", "tolower : function (x)  "],
    ["topenv(", "topenv : function (envir = parent.frame(), matchThisEnv = getOption('topLevelEnvironment'))  "],
    ["toString(", "toString : function (x, ...)  "],
    ["toString.default(", "toString.default : function (x, width = NULL, ...)  "],
    ["toupper(", "toupper : function (x)  "],
    ["trace(", "trace : function (what, tracer, exit, at, print, signature, where = topenv(parent.frame()), edit = FALSE)  "],
    ["traceback(", "traceback : function (x = NULL, max.lines = getOption('deparse.max.lines'))  "],
    ["tracemem(", "tracemem : function (x)  "],
    ["tracingState(", "tracingState : function (on = NULL)  "],
    ["transform(", "transform : function (`_data`, ...)  "],
    ["transform.data.frame(", "transform.data.frame : function (`_data`, ...)  "],
    ["transform.default(", "transform.default : function (`_data`, ...)  "],
    ["trigamma(", "trigamma : function (x)  "],
    ["trimws(", "trimws : function (x, which = c('both', 'left', 'right'))  "],
    ["trunc(", "trunc : function (x, ...)  "],
    ["trunc.Date(", "trunc.Date : function (x, ...)  "],
    ["trunc.POSIXt(", "trunc.POSIXt : function (x, units = c('secs', 'mins', 'hours', 'days', 'months', 'years'), ...)  "],
    ["truncate(", "truncate : function (con, ...)  "],
    ["truncate.connection(", "truncate.connection : function (con, ...)  "],
    ["try(", "try : function (expr, silent = FALSE, outFile = getOption('try.outFile', default = stderr()))  "],
    ["tryCatch(", "tryCatch : function (expr, ..., finally)  "],
    ["typeof(", "typeof : function (x)  "],
    ["unclass(", "unclass : function (x)  "],
    ["undebug(", "undebug : function (fun, signature = NULL)  "],
    ["union(", "union : function (x, y)  "],
    ["unique(", "unique : function (x, incomparables = FALSE, ...)  "],
    ["unique.array(", "unique.array : function (x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ...)  "],
    ["unique.data.frame(", "unique.data.frame : function (x, incomparables = FALSE, fromLast = FALSE, ...)  "],
    ["unique.default(", "unique.default : function (x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ...)  "],
    ["unique.matrix(", "unique.matrix : function (x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ...)  "],
    ["unique.numeric_version(", "unique.numeric_version : function (x, incomparables = FALSE, ...)  "],
    ["unique.POSIXlt(", "unique.POSIXlt : function (x, incomparables = FALSE, ...)  "],
    ["unique.warnings(", "unique.warnings : function (x, incomparables = FALSE, ...)  "],
    ["units(", "units : function (x)  "],
    ["units.difftime(", "units.difftime : function (x)  "],
    ["units<-(", "units<- : function (x, value)  "],
    ["units<-.difftime(", "units<-.difftime : function (x, value)  "],
    ["unix.time(", "unix.time : function (...)  "],
    ["unlink(", "unlink : function (x, recursive = FALSE, force = FALSE)  "],
    ["unlist(", "unlist : function (x, recursive = TRUE, use.names = TRUE)  "],
    ["unloadNamespace(", "unloadNamespace : function (ns)  "],
    ["unlockBinding(", "unlockBinding : function (sym, env)  "],
    ["unname(", "unname : function (obj, force = FALSE)  "],
    ["unserialize(", "unserialize : function (connection, refhook = NULL)  "],
    ["unsplit(", "unsplit : function (value, f, drop = FALSE)  "],
    ["untrace(", "untrace : function (what, signature = NULL, where = topenv(parent.frame()))  "],
    ["untracemem(", "untracemem : function (x)  "],
    ["unz(", "unz : function (description, filename, open = '', encoding = getOption('encoding'))  "],
    ["upper.tri(", "upper.tri : function (x, diag = FALSE)  "],
    ["url(", "url : function (description, open = '', blocking = TRUE, encoding = getOption('encoding'), method = getOption('url.method', 'default'))  "],
    ["UseMethod(", "UseMethod : function (generic, object)  "],
    ["utf8ToInt(", "utf8ToInt : function (x)  "],
    ["validEnc(", "validEnc : function (x)  "],
    ["validUTF8(", "validUTF8 : function (x)  "],
    ["vapply(", "vapply : function (X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)  "],
    ["vector(", "vector : function (mode = 'logical', length = 0L)  "],
    ["Vectorize(", "Vectorize : function (FUN, vectorize.args = arg.names, SIMPLIFY = TRUE, USE.NAMES = TRUE)  "],
    ["warning(", "warning : function (..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE, domain = NULL)  "],
    ["warnings(", "warnings : function (...)  "],
    ["weekdays(", "weekdays : function (x, abbreviate)  "],
    ["weekdays.Date(", "weekdays.Date : function (x, abbreviate = FALSE)  "],
    ["weekdays.POSIXt(", "weekdays.POSIXt : function (x, abbreviate = FALSE)  "],
    ["which(", "which : function (x, arr.ind = FALSE, useNames = TRUE)  "],
    ["which.max(", "which.max : function (x)  "],
    ["which.min(", "which.min : function (x)  "],
    ["while(", "while : .Primitive('while') "],
    ["with(", "with : function (data, expr, ...)  "],
    ["with.default(", "with.default : function (data, expr, ...)  "],
    ["withAutoprint(", "withAutoprint : function (exprs, evaluated = FALSE, local = parent.frame(), print. = TRUE, echo = TRUE, max.deparse.length = Inf, width.cutoff = max(20, getOption('width')), deparseCtrl = c('keepInteger', 'showAttributes', 'keepNA'), ...)  "],
    ["withCallingHandlers(", "withCallingHandlers : function (expr, ...)  "],
    ["within(", "within : function (data, expr, ...)  "],
    ["within.data.frame(", "within.data.frame : function (data, expr, ...)  "],
    ["within.list(", "within.list : function (data, expr, keepAttrs = TRUE, ...)  "],
    ["withRestarts(", "withRestarts : function (expr, ...)  "],
    ["withVisible(", "withVisible : function (x)  "],
    ["write(", "write : function (x, file = 'data', ncolumns = if (is.character(x)) 1 else 5, append = FALSE, sep = ' ')  "],
    ["write.dcf(", "write.dcf : function (x, file = '', append = FALSE, useBytes = FALSE, indent = 0.1 * getOption('width'), width = 0.9 * getOption('width'), keep.white = NULL)  "],
    ["writeBin(", "writeBin : function (object, con, size = NA_integer_, endian = .Platform$endian, useBytes = FALSE)  "],
    ["writeChar(", "writeChar : function (object, con, nchars = nchar(object, type = 'chars'), eos = '', useBytes = FALSE)  "],
    ["writeLines(", "writeLines : function (text, con = stdout(), sep = '\n', useBytes = FALSE)  "],
    ["xor(", "xor : function (x, y)  "],
    ["xpdrows.data.frame(", "xpdrows.data.frame : function (x, old.rows, new.rows)  "],
    ["xtfrm(", "xtfrm : function (x)  "],
    ["xtfrm.AsIs(", "xtfrm.AsIs : function (x)  "],
    ["xtfrm.Date(", "xtfrm.Date : function (x)  "],
    ["xtfrm.default(", "xtfrm.default : function (x)  "],
    ["xtfrm.difftime(", "xtfrm.difftime : function (x)  "],
    ["xtfrm.factor(", "xtfrm.factor : function (x)  "],
    ["xtfrm.numeric_version(", "xtfrm.numeric_version : function (x)  "],
    ["xtfrm.POSIXct(", "xtfrm.POSIXct : function (x)  "],
    ["xtfrm.POSIXlt(", "xtfrm.POSIXlt : function (x)  "],
    ["xtfrm.Surv(", "xtfrm.Surv : function (x)  "],
    ["xzfile(", "xzfile : function (description, open = '', encoding = getOption('encoding'), compression = 6)  "],
    ["zapsmall(", "zapsmall : function (x, digits = getOption('digits'))  "],
    ["?(", "? : function (e1, e2)  "],
    ["adist(", "adist : function (x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE, partial = !fixed, ignore.case = FALSE, useBytes = FALSE)  "],
    ["alarm(", "alarm : function ()  "],
    ["apropos(", "apropos : function (what, where = FALSE, ignore.case = TRUE, mode = 'any')  "],
    ["aregexec(", "aregexec : function (pattern, text, max.distance = 0.1, costs = NULL, ignore.case = FALSE, fixed = FALSE, useBytes = FALSE)  "],
    ["argsAnywhere(", "argsAnywhere : function (x)  "],
    ["as.person(", "as.person : function (x)  "],
    ["as.personList(", "as.personList : function (x)  "],
    ["as.relistable(", "as.relistable : function (x)  "],
    ["as.roman(", "as.roman : function (x)  "],
    ["asDateBuilt(", "asDateBuilt : function (built)  "],
    ["askYesNo(", "askYesNo : function (msg, default = TRUE, prompts = getOption('askYesNo', gettext(c('Yes', 'No', 'Cancel'))), ...)  "],
    ["aspell(", "aspell : function (files, filter, control = list(), encoding = 'unknown', program = NULL, dictionaries = character())  "],
    ["aspell_package_C_files(", "aspell_package_C_files : function (dir, ignore = character(), control = list(), program = NULL, dictionaries = character())  "],
    ["aspell_package_R_files(", "aspell_package_R_files : function (dir, ignore = character(), control = list(), program = NULL, dictionaries = character())  "],
    ["aspell_package_Rd_files(", "aspell_package_Rd_files : function (dir, drop = c('\\author', '\\references'), control = list(), program = NULL, dictionaries = character())  "],
    ["aspell_package_vignettes(", "aspell_package_vignettes : function (dir, control = list(), program = NULL, dictionaries = character())  "],
    ["aspell_write_personal_dictionary_file(", "aspell_write_personal_dictionary_file : function (x, out, language = 'en', program = NULL)  "],
    ["assignInMyNamespace(", "assignInMyNamespace : function (x, value)  "],
    ["assignInNamespace(", "assignInNamespace : function (x, value, ns, pos = -1, envir = as.environment(pos))  "],
    ["available.packages(", "available.packages : function (contriburl = contrib.url(repos, type), method, fields = NULL, type = getOption('pkgType'), filters = NULL, repos = getOption('repos'), ignore_repo_cache = FALSE, max_repo_cache_age, ...)  "],
    ["bibentry(", "bibentry : function (bibtype, textVersion = NULL, header = NULL, footer = NULL, key = NULL, ..., other = list(), mheader = NULL, mfooter = NULL)  "],
    ["browseEnv(", "browseEnv : function (envir = .GlobalEnv, pattern, excludepatt = '^last\\.warning', html = .Platform$GUI != 'AQUA', expanded = TRUE, properties = NULL, main = NULL, debugMe = FALSE)  "],
    ["browseURL(", "browseURL : function (url, browser = getOption('browser'), encodeIfNeeded = FALSE)  "],
    ["browseVignettes(", "browseVignettes : function (package = NULL, lib.loc = NULL, all = TRUE)  "],
    ["bug.report(", "bug.report : function (...)  "],
    ["capture.output(", "capture.output : function (..., file = NULL, append = FALSE, type = c('output', 'message'), split = FALSE)  "],
    ["changedFiles(", "changedFiles : function (before, after, path = before$path, timestamp = before$timestamp, check.file.info = c('size', 'isdir', 'mode', 'mtime'), md5sum = before$md5sum, digest = before$digest, full.names = before$full.names, ...)  "],
    ["checkCRAN(", "checkCRAN : function (method)  "],
    ["chooseBioCmirror(", "chooseBioCmirror : function (graphics = getOption('menu.graphics'), ind = NULL, local.only = FALSE)  "],
    ["chooseCRANmirror(", "chooseCRANmirror : function (graphics = getOption('menu.graphics'), ind = NULL, local.only = FALSE)  "],
    ["citation(", "citation : function (package = 'base', lib.loc = NULL, auto = NULL)  "],
    ["cite(", "cite : function (keys, bib, ...)  "],
    ["citeNatbib(", "citeNatbib : function (keys, bib, textual = FALSE, before = NULL, after = NULL, mode = c('authoryear', 'numbers', 'super'), abbreviate = TRUE, longnamesfirst = TRUE, bibpunct = c('(', ')', ';', 'a', '', ','), previous)  "],
    ["citEntry(", "citEntry : function (entry, textVersion, header = NULL, footer = NULL, ...)  "],
    ["citFooter(", "citFooter : function (...)  "],
    ["citHeader(", "citHeader : function (...)  "],
    ["close.socket(", "close.socket : function (socket, ...)  "],
    ["combn(", "combn : function (x, m, FUN = NULL, simplify = TRUE, ...)  "],
    ["compareVersion(", "compareVersion : function (a, b)  "],
    ["contrib.url(", "contrib.url : function (repos, type = getOption('pkgType'))  "],
    ["count.fields(", "count.fields : function (file, sep = '', quote = '\''', skip = 0, blank.lines.skip = TRUE, comment.char = '#')  "],
    ["CRAN.packages(", "CRAN.packages : function (CRAN = getOption('repos'), method, contriburl = contrib.url(CRAN))  "],
    ["create.post(", "create.post : function (instructions = character(), description = 'post', subject = '', method = getOption('mailer'), address = 'the relevant mailing list', ccaddress = getOption('ccaddress', ''), filename = 'R.post', info = character())  "],
    ["data(", "data : function (..., list = character(), package = NULL, lib.loc = NULL, verbose = getOption('verbose'), envir = .GlobalEnv)  "],
    ["data.entry(", "data.entry : function (..., Modes = NULL, Names = NULL)  "],
    ["dataentry(", "dataentry : function (data, modes)  "],
    ["de(", "de : function (..., Modes = list(), Names = NULL)  "],
    ["de.ncols(", "de.ncols : function (inlist)  "],
    ["de.restore(", "de.restore : function (inlist, ncols, coltypes, argnames, args)  "],
    ["de.setup(", "de.setup : function (ilist, list.names, incols)  "],
    ["debugcall(", "debugcall : function (call, once = FALSE)  "],
    ["debugger(", "debugger : function (dump = last.dump)  "],
    ["demo(", "demo : function (topic, package = NULL, lib.loc = NULL, character.only = FALSE, verbose = getOption('verbose'), echo = TRUE, ask = getOption('demo.ask'), encoding = getOption('encoding'))  "],
    ["download.file(", "download.file : function (url, destfile, method, quiet = FALSE, mode = 'w', cacheOK = TRUE, extra = getOption('download.file.extra'), ...)  "],
    ["download.packages(", "download.packages : function (pkgs, destdir, available = NULL, repos = getOption('repos'), contriburl = contrib.url(repos, type), method, type = getOption('pkgType'), ...)  "],
    ["dump.frames(", "dump.frames : function (dumpto = 'last.dump', to.file = FALSE, include.GlobalEnv = FALSE)  "],
    ["edit(", "edit : function (name, ...)  "],
    ["emacs(", "emacs : function (name = NULL, file = '')  "],
    ["example(", "example : function (topic, package = NULL, lib.loc = NULL, character.only = FALSE, give.lines = FALSE, local = FALSE, echo = TRUE, verbose = getOption('verbose'), setRNG = FALSE, ask = getOption('example.ask'), prompt.prefix = abbreviate(topic, 6), run.dontrun = FALSE, run.donttest = interactive())  "],
    ["file_test(", "file_test : function (op, x, y)  "],
    ["file.edit(", "file.edit : function (...)  "],
    ["fileSnapshot(", "fileSnapshot : function (path = '.', file.info = TRUE, timestamp = NULL, md5sum = FALSE, digest = NULL, full.names = length(path) > 1, ...)  "],
    ["find(", "find : function (what, mode = 'any', numeric = FALSE, simple.words = TRUE)  "],
    ["findLineNum(", "findLineNum : function (srcfile, line, nameonly = TRUE, envir = parent.frame(), lastenv)  "],
    ["fix(", "fix : function (x, ...)  "],
    ["fixInNamespace(", "fixInNamespace : function (x, ns, pos = -1, envir = as.environment(pos), ...)  "],
    ["flush.console(", "flush.console : function ()  "],
    ["formatOL(", "formatOL : function (x, type = 'arabic', offset = 0, start = 1, width = 0.9 * getOption('width'))  "],
    ["formatUL(", "formatUL : function (x, label = '*', offset = 0, width = 0.9 * getOption('width'))  "],
    ["getAnywhere(", "getAnywhere : function (x)  "],
    ["getCRANmirrors(", "getCRANmirrors : function (all = FALSE, local.only = FALSE)  "],
    ["getFromNamespace(", "getFromNamespace : function (x, ns, pos = -1, envir = as.environment(pos))  "],
    ["getParseData(", "getParseData : function (x, includeText = NA)  "],
    ["getParseText(", "getParseText : function (parseData, id)  "],
    ["getS3method(", "getS3method : function (f, class, optional = FALSE, envir = parent.frame())  "],
    ["getSrcDirectory(", "getSrcDirectory : function (x, unique = TRUE)  "],
    ["getSrcFilename(", "getSrcFilename : function (x, full.names = FALSE, unique = TRUE)  "],
    ["getSrcLocation(", "getSrcLocation : function (x, which = c('line', 'column', 'byte', 'parse'), first = TRUE)  "],
    ["getSrcref(", "getSrcref : function (x)  "],
    ["getTxtProgressBar(", "getTxtProgressBar : function (pb)  "],
    ["glob2rx(", "glob2rx : function (pattern, trim.head = FALSE, trim.tail = TRUE)  "],
    ["globalVariables(", "globalVariables : function (names, package, add = TRUE)  "],
    ["hasName(", "hasName : function (x, name)  "],
    ["head(", "head : function (x, ...)  "],
    ["head.matrix(", "head.matrix : function (x, n = 6L, ...)  "],
    ["help(", "help : function (topic, package = NULL, lib.loc = NULL, verbose = getOption('verbose'), try.all.packages = getOption('help.try.all.packages'), help_type = getOption('help_type'))  "],
    ["help.request(", "help.request : function (...)  "],
    ["help.search(", "help.search : function (pattern, fields = c('alias', 'concept', 'title'), apropos, keyword, whatis, ignore.case = TRUE, package = NULL, lib.loc = NULL, help.db = getOption('help.db'), verbose = getOption('verbose'), rebuild = FALSE, agrep = NULL, use_UTF8 = FALSE, types = getOption('help.search.types'))  "],
    ["help.start(", "help.start : function (update = FALSE, gui = 'irrelevant', browser = getOption('browser'), remote = NULL)  "],
    ["history(", "history : function (...)  "],
    ["hsearch_db(", "hsearch_db : function (package = NULL, lib.loc = NULL, types = getOption('help.search.types'), verbose = getOption('verbose'), rebuild = FALSE, use_UTF8 = FALSE)  "],
    ["hsearch_db_concepts(", "hsearch_db_concepts : function (db = hsearch_db())  "],
    ["hsearch_db_keywords(", "hsearch_db_keywords : function (db = hsearch_db())  "],
    ["install.packages(", "install.packages : function (...)  "],
    ["installed.packages(", "installed.packages : function (lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, subarch = .Platform$r_arch, ...)  "],
    ["is.relistable(", "is.relistable : function (x)  "],
    ["isS3method(", "isS3method : function (method, f, class, envir = parent.frame())  "],
    ["isS3stdGeneric(", "isS3stdGeneric : function (f)  "],
    ["limitedLabels(", "limitedLabels : function (value, maxwidth = getOption('width') - 5L)  "],
    ["loadhistory(", "loadhistory : function (file = '.Rhistory')  "],
    ["localeToCharset(", "localeToCharset : function (locale = Sys.getlocale('LC_CTYPE'))  "],
    ["ls.str(", "ls.str : function (pos = -1, name, envir, all.names = FALSE, pattern, mode = 'any')  "],
    ["lsf.str(", "lsf.str : function (pos = -1, envir, ...)  "],
    ["maintainer(", "maintainer : function (pkg)  "],
    ["make.packages.html(", "make.packages.html : function (lib.loc = .libPaths(), temp = FALSE, verbose = TRUE, docdir = R.home('doc'))  "],
    ["make.socket(", "make.socket : function (host = 'localhost', port, fail = TRUE, server = FALSE)  "],
    ["makeRweaveLatexCodeRunner(", "makeRweaveLatexCodeRunner : function (evalFunc = RweaveEvalWithOpt)  "],
    ["memory.limit(", "memory.limit : function (size = NA)  "],
    ["memory.size(", "memory.size : function (max = FALSE)  "],
    ["menu(", "menu : function (choices, graphics = FALSE, title = NULL)  "],
    ["methods(", "methods : function (generic.function, class)  "],
    ["mirror2html(", "mirror2html : function (mirrors = NULL, file = 'mirrors.html', head = 'mirrors-head.html', foot = 'mirrors-foot.html')  "],
    ["modifyList(", "modifyList : function (x, val, keep.null = FALSE)  "],
    ["new.packages(", "new.packages : function (lib.loc = NULL, repos = getOption('repos'), contriburl = contrib.url(repos, type), instPkgs = installed.packages(lib.loc = lib.loc, ...), method, available = NULL, ask = FALSE, ..., type = getOption('pkgType'))  "],
    ["news(", "news : function (query, package = 'R', lib.loc = NULL, format = NULL, reader = NULL, db = NULL)  "],
    ["nsl(", "nsl : function (hostname)  "],
    ["object.size(", "object.size : function (x)  "],
    ["old.packages(", "old.packages : function (lib.loc = NULL, repos = getOption('repos'), contriburl = contrib.url(repos, type), instPkgs = installed.packages(lib.loc = lib.loc, ...), method, available = NULL, checkBuilt = FALSE, ..., type = getOption('pkgType'))  "],
    ["package.skeleton(", "package.skeleton : function (name = 'anRpackage', list = character(), environment = .GlobalEnv, path = '.', force = FALSE, code_files = character(), encoding = 'unknown')  "],
    ["packageDate(", "packageDate : function (pkg, lib.loc = NULL, date.fields = c('Date', 'Packaged', 'Date/Publication', 'Built'), tryFormats = c('%Y-%m-%d', '%Y/%m/%d', '%D', '%m/%d/%y'), desc = packageDescription(pkg, lib.loc = lib.loc, fields = date.fields))  "],
    ["packageDescription(", "packageDescription : function (pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = '')  "],
    ["packageName(", "packageName : function (env = parent.frame())  "],
    ["packageStatus(", "packageStatus : function (lib.loc = NULL, repositories = NULL, method, type = getOption('pkgType'), ...)  "],
    ["packageVersion(", "packageVersion : function (pkg, lib.loc = NULL)  "],
    ["page(", "page : function (x, method = c('dput', 'print'), ...)  "],
    ["person(", "person : function (given = NULL, family = NULL, middle = NULL, email = NULL, role = NULL, comment = NULL, first = NULL, last = NULL)  "],
    ["personList(", "personList : function (...)  "],
    ["pico(", "pico : function (name = NULL, file = '')  "],
    ["process.events(", "process.events : function ()  "],
    ["prompt(", "prompt : function (object, filename = NULL, name = NULL, ...)  "],
    ["promptData(", "promptData : function (object, filename = NULL, name = NULL)  "],
    ["promptImport(", "promptImport : function (object, filename = NULL, name = NULL, importedFrom = NULL, importPage = name, ...)  "],
    ["promptPackage(", "promptPackage : function (package, lib.loc = NULL, filename = NULL, name = NULL, final = FALSE)  "],
    ["rc.getOption(", "rc.getOption : function (name)  "],
    ["rc.options(", "rc.options : function (...)  "],
    ["rc.settings(", "rc.settings : function (ops, ns, args, func, ipck, S3, data, help, argdb, fuzzy, quotes, files)  "],
    ["rc.status(", "rc.status : function ()  "],
    ["read.csv(", "read.csv : function (file, header = TRUE, sep = ',', quote = '\'', dec = '.', fill = TRUE, comment.char = '', ...)  "],
    ["read.csv2(", "read.csv2 : function (file, header = TRUE, sep = ';', quote = '\'', dec = ',', fill = TRUE, comment.char = '', ...)  "],
    ["read.delim(", "read.delim : function (file, header = TRUE, sep = '\t', quote = '\'', dec = '.', fill = TRUE, comment.char = '', ...)  "],
    ["read.delim2(", "read.delim2 : function (file, header = TRUE, sep = '\t', quote = '\'', dec = ',', fill = TRUE, comment.char = '', ...)  "],
    ["read.DIF(", "read.DIF : function (file, header = FALSE, dec = '.', numerals = c('allow.loss', 'warn.loss', 'no.loss'), row.names, col.names, as.is = !stringsAsFactors, na.strings = 'NA', colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, blank.lines.skip = TRUE, stringsAsFactors = default.stringsAsFactors(), transpose = FALSE, fileEncoding = '')  "],
    ["read.fortran(", "read.fortran : function (file, format, ..., as.is = TRUE, colClasses = NA)  "],
    ["read.fwf(", "read.fwf : function (file, widths, header = FALSE, sep = '\t', skip = 0L, row.names, col.names, n = -1L, buffersize = 2000, fileEncoding = '', ...)  "],
    ["read.socket(", "read.socket : function (socket, maxlen = 256L, loop = FALSE)  "],
    ["read.table(", "read.table : function (file, header = FALSE, sep = '', quote = '\''', dec = '.', numerals = c('allow.loss', 'warn.loss', 'no.loss'), row.names, col.names, as.is = !stringsAsFactors, na.strings = 'NA', colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, comment.char = '#', allowEscapes = FALSE, flush = FALSE, stringsAsFactors = default.stringsAsFactors(), fileEncoding = '', encoding = 'unknown', text, skipNul = FALSE)  "],
    ["readCitationFile(", "readCitationFile : function (file, meta = NULL)  "],
    ["recover(", "recover : function ()  "],
    ["relist(", "relist : function (flesh, skeleton = attr(flesh, 'skeleton'))  "],
    ["remove.packages(", "remove.packages : function (...)  "],
    ["removeSource(", "removeSource : function (fn)  "],
    ["Rprof(", "Rprof : function (...)  "],
    ["Rprofmem(", "Rprofmem : function (filename = 'Rprofmem.out', append = FALSE, threshold = 0)  "],
    ["RShowDoc(", "RShowDoc : function (what, type = c('pdf', 'html', 'txt'), package)  "],
    ["RSiteSearch(", "RSiteSearch : function (string, restrict = c('functions', 'vignettes', 'views'), format = c('normal', 'short'), sortby = c('score', 'date:late', 'date:early', 'subject', 'subject:descending', 'from', 'from:descending', 'size', 'size:descending'), matchesPerPage = 20)  "],
    ["rtags(", "rtags : function (path = '.', pattern = '\\.[RrSs]$', recursive = FALSE, src = list.files(path = path, pattern = pattern, full.names = TRUE, recursive = recursive), keep.re = NULL, ofile = '', append = FALSE, verbose = getOption('verbose'))  "],
    ["Rtangle(", "Rtangle : function ()  "],
    ["RtangleSetup(", "RtangleSetup : function (file, syntax, output = NULL, annotate = TRUE, split = FALSE, quiet = FALSE, drop.evalFALSE = FALSE, ...)  "],
    ["RtangleWritedoc(", "RtangleWritedoc : function (object, chunk)  "],
    ["RweaveChunkPrefix(", "RweaveChunkPrefix : function (options)  "],
    ["RweaveEvalWithOpt(", "RweaveEvalWithOpt : function (expr, options)  "],
    ["RweaveLatex(", "RweaveLatex : function ()  "],
    ["RweaveLatexFinish(", "RweaveLatexFinish : function (object, error = FALSE)  "],
    ["RweaveLatexOptions(", "RweaveLatexOptions : function (options)  "],
    ["RweaveLatexSetup(", "RweaveLatexSetup : function (file, syntax, output = NULL, quiet = FALSE, debug = FALSE, stylepath, ...)  "],
    ["RweaveLatexWritedoc(", "RweaveLatexWritedoc : function (object, chunk)  "],
    ["RweaveTryStop(", "RweaveTryStop : function (err, options)  "],
    ["savehistory(", "savehistory : function (file = '.Rhistory')  "],
    ["select.list(", "select.list : function (choices, preselect = NULL, multiple = FALSE, title = NULL, graphics = getOption('menu.graphics'))  "],
    ["sessionInfo(", "sessionInfo : function (package = NULL)  "],
    ["setBreakpoint(", "setBreakpoint : function (srcfile, line, nameonly = TRUE, envir = parent.frame(), lastenv, verbose = TRUE, tracer, print = FALSE, clear = FALSE, ...)  "],
    ["setRepositories(", "setRepositories : function (graphics = getOption('menu.graphics'), ind = NULL, addURLs = character())  "],
    ["setTxtProgressBar(", "setTxtProgressBar : function (pb, value, title = NULL, label = NULL)  "],
    ["stack(", "stack : function (x, ...)  "],
    ["Stangle(", "Stangle : function (file, driver = Rtangle(), syntax = getOption('SweaveSyntax'), encoding = '', ...)  "],
    ["str(", "str : function (object, ...)  "],
    ["strcapture(", "strcapture : function (pattern, x, proto, perl = FALSE, useBytes = FALSE)  "],
    ["strOptions(", "strOptions : function (strict.width = 'no', digits.d = 3, vec.len = 4, drop.deparse.attr = TRUE, formatNum = function(x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...))  "],
    ["summaryRprof(", "summaryRprof : function (filename = 'Rprof.out', chunksize = 5000, memory = c('none', 'both', 'tseries', 'stats'), lines = c('hide', 'show', 'both'), index = 2, diff = TRUE, exclude = NULL, basenames = 1)  "],
    ["suppressForeignCheck(", "suppressForeignCheck : function (names, package, add = TRUE)  "],
    ["Sweave(", "Sweave : function (file, driver = RweaveLatex(), syntax = getOption('SweaveSyntax'), encoding = '', ...)  "],
    ["SweaveHooks(", "SweaveHooks : function (options, run = FALSE, envir = .GlobalEnv)  "],
    ["SweaveSyntConv(", "SweaveSyntConv : function (file, syntax, output = NULL)  "],
    ["tail(", "tail : function (x, ...)  "],
    ["tail.matrix(", "tail.matrix : function (x, n = 6L, addrownums = TRUE, ...)  "],
    ["tar(", "tar : function (tarfile, files = NULL, compression = c('none', 'gzip', 'bzip2', 'xz'), compression_level = 6, tar = Sys.getenv('tar'), extra_flags = '')  "],
    ["timestamp(", "timestamp : function (stamp = date(), prefix = '##------ ', suffix = ' ------##', quiet = FALSE)  "],
    ["toBibtex(", "toBibtex : function (object, ...)  "],
    ["toLatex(", "toLatex : function (object, ...)  "],
    ["txtProgressBar(", "txtProgressBar : function (min = 0, max = 1, initial = 0, char = '=', width = NA, title, label, style = 1, file = '')  "],
    ["type.convert(", "type.convert : function (x, ...)  "],
    ["undebugcall(", "undebugcall : function (call)  "],
    ["unstack(", "unstack : function (x, ...)  "],
    ["untar(", "untar : function (tarfile, files = NULL, list = FALSE, exdir = '.', compressed = NA, extras = NULL, verbose = FALSE, restore_times = TRUE, tar = Sys.getenv('TAR'))  "],
    ["unzip(", "unzip : function (zipfile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = '.', unzip = 'internal', setTimes = FALSE)  "],
    ["update.packages(", "update.packages : function (lib.loc = NULL, repos = getOption('repos'), contriburl = contrib.url(repos, type), method, instlib = NULL, ask = TRUE, available = NULL, oldPkgs = NULL, ..., checkBuilt = FALSE, type = getOption('pkgType'))  "],
    ["upgrade(", "upgrade : function (object, ...)  "],
    ["url.show(", "url.show : function (url, title = url, file = tempfile(), delete.file = TRUE, method, ...)  "],
    ["URLdecode(", "URLdecode : function (URL)  "],
    ["URLencode(", "URLencode : function (URL, reserved = FALSE, repeated = FALSE)  "],
    ["vi(", "vi : function (name = NULL, file = '')  "],
    ["View(", "View : function (...)  "],
    ["vignette(", "vignette : function (topic, package = NULL, lib.loc = NULL, all = TRUE)  "],
    ["warnErrList(", "warnErrList : function (x, warn = TRUE, errValue = NULL)  "],
    ["write.csv(", "write.csv : function (...)  "],
    ["write.csv2(", "write.csv2 : function (...)  "],
    ["write.socket(", "write.socket : function (socket, string)  "],
    ["write.table(", "write.table : function (x, file = '', append = FALSE, quote = TRUE, sep = ' ', eol = '\n', na = 'NA', dec = '.', row.names = TRUE, col.names = TRUE, qmethod = c('escape', 'double'), fileEncoding = '')  "],
    ["xedit(", "xedit : function (name = NULL, file = '')  "],
    ["xemacs(", "xemacs : function (name = NULL, file = '')  "],
    ["zip(", "zip : function (zipfile, files, flags = '-r9X', extras = '', zip = Sys.getenv('R_ZIPCMD', 'zip'))  "],
    ["%+%(", "%+% : function (e1, e2)  "],
    ["%+replace%(", "%+replace% : function (e1, e2)  "],
    ["aes(", "aes : function (x, y, ...)  "],
    ["aes_(", "aes_ : function (x, y, ...)  "],
    ["aes_all(", "aes_all : function (vars)  "],
    ["aes_auto(", "aes_auto : function (data = NULL, ...)  "],
    ["aes_q(", "aes_q : function (x, y, ...)  "],
    ["aes_string(", "aes_string : function (x, y, ...)  "],
    ["alpha(", "alpha : function (colour, alpha = NA)  "],
    ["annotate(", "annotate : function (geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL, xend = NULL, yend = NULL, ..., na.rm = FALSE)  "],
    ["annotation_custom(", "annotation_custom : function (grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)  "],
    ["annotation_logticks(", "annotation_logticks : function (base = 10, sides = 'bl', scaled = TRUE, short = unit(0.1, 'cm'), mid = unit(0.2, 'cm'), long = unit(0.3, 'cm'), colour = 'black', size = 0.5, linetype = 1, alpha = 1, color = NULL, ...)  "],
    ["annotation_map(", "annotation_map : function (map, ...)  "],
    ["annotation_raster(", "annotation_raster : function (raster, xmin, xmax, ymin, ymax, interpolate = FALSE)  "],
    ["arrow(", "arrow : function (angle = 30, length = unit(0.25, 'inches'), ends = 'last', type = 'open')  "],
    ["as_labeller(", "as_labeller : function (x, default = label_value, multi_line = TRUE)  "],
    ["autolayer(", "autolayer : function (object, ...)  "],
    ["autoplot(", "autoplot : function (object, ...)  "],
    ["benchplot(", "benchplot : function (x)  "],
    ["borders(", "borders : function (database = 'world', regions = '.', fill = NA, colour = 'grey50', xlim = NULL, ylim = NULL, ...)  "],
    ["calc_element(", "calc_element : function (element, theme, verbose = FALSE)  "],
    ["combine_vars(", "combine_vars : function (data, env = emptyenv(), vars = NULL, drop = TRUE)  "],
    ["continuous_scale(", "continuous_scale : function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(), minor_breaks = waiver(), labels = waiver(), limits = NULL, rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_, trans = 'identity', guide = 'legend', position = 'left', super = ScaleContinuous)  "],
    ["coord_cartesian(", "coord_cartesian : function (xlim = NULL, ylim = NULL, expand = TRUE, default = FALSE, clip = 'on')  "],
    ["coord_equal(", "coord_equal : function (ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = 'on')  "],
    ["coord_fixed(", "coord_fixed : function (ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = 'on')  "],
    ["coord_flip(", "coord_flip : function (xlim = NULL, ylim = NULL, expand = TRUE, clip = 'on')  "],
    ["coord_map(", "coord_map : function (projection = 'mercator', ..., parameters = NULL, orientation = NULL, xlim = NULL, ylim = NULL, clip = 'on')  "],
    ["coord_munch(", "coord_munch : function (coord, data, range, segment_length = 0.01)  "],
    ["coord_polar(", "coord_polar : function (theta = 'x', start = 0, direction = 1, clip = 'on')  "],
    ["coord_quickmap(", "coord_quickmap : function (xlim = NULL, ylim = NULL, expand = TRUE, clip = 'on')  "],
    ["coord_sf(", "coord_sf : function (xlim = NULL, ylim = NULL, expand = TRUE, crs = NULL, datum = sf::st_crs(4326), label_graticule = waiver(), label_axes = waiver(), ndiscr = 100, default = FALSE, clip = 'on')  "],
    ["coord_trans(", "coord_trans : function (x = 'identity', y = 'identity', limx = NULL, limy = NULL, clip = 'on', xtrans, ytrans)  "],
    ["cut_interval(", "cut_interval : function (x, n = NULL, length = NULL, ...)  "],
    ["cut_number(", "cut_number : function (x, n = NULL, ...)  "],
    ["cut_width(", "cut_width : function (x, width, center = NULL, boundary = NULL, closed = c('right', 'left'))  "],
    ["derive(", "derive : function ()  "],
    ["discrete_scale(", "discrete_scale : function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(), labels = waiver(), limits = NULL, expand = waiver(), na.translate = TRUE, na.value = NA, drop = TRUE, guide = 'legend', position = 'left', super = ScaleDiscrete)  "],
    ["draw_key_abline(", "draw_key_abline : function (data, params, size)  "],
    ["draw_key_blank(", "draw_key_blank : function (data, params, size)  "],
    ["draw_key_boxplot(", "draw_key_boxplot : function (data, params, size)  "],
    ["draw_key_crossbar(", "draw_key_crossbar : function (data, params, size)  "],
    ["draw_key_dotplot(", "draw_key_dotplot : function (data, params, size)  "],
    ["draw_key_label(", "draw_key_label : function (data, params, size)  "],
    ["draw_key_path(", "draw_key_path : function (data, params, size)  "],
    ["draw_key_point(", "draw_key_point : function (data, params, size)  "],
    ["draw_key_pointrange(", "draw_key_pointrange : function (data, params, size)  "],
    ["draw_key_polygon(", "draw_key_polygon : function (data, params, size)  "],
    ["draw_key_rect(", "draw_key_rect : function (data, params, size)  "],
    ["draw_key_smooth(", "draw_key_smooth : function (data, params, size)  "],
    ["draw_key_text(", "draw_key_text : function (data, params, size)  "],
    ["draw_key_vline(", "draw_key_vline : function (data, params, size)  "],
    ["draw_key_vpath(", "draw_key_vpath : function (data, params, size)  "],
    ["dup_axis(", "dup_axis : function (trans = ~., name = derive(), breaks = derive(), labels = derive())  "],
    ["element_blank(", "element_blank : function ()  "],
    ["element_grob(", "element_grob : function (element, ...)  "],
    ["element_line(", "element_line : function (colour = NULL, size = NULL, linetype = NULL, lineend = NULL, color = NULL, arrow = NULL, inherit.blank = FALSE)  "],
    ["element_rect(", "element_rect : function (fill = NULL, colour = NULL, size = NULL, linetype = NULL, color = NULL, inherit.blank = FALSE)  "],
    ["element_text(", "element_text : function (family = NULL, face = NULL, colour = NULL, size = NULL, hjust = NULL, vjust = NULL, angle = NULL, lineheight = NULL, color = NULL, margin = NULL, debug = NULL, inherit.blank = FALSE)  "],
    ["enexpr(", "enexpr : function (arg)  "],
    ["enexprs(", "enexprs : function (..., .named = FALSE, .ignore_empty = c('trailing', 'none', 'all'), .unquote_names = TRUE, .homonyms = c('keep', 'first', 'last', 'error'), .check_assign = FALSE)  "],
    ["enquo(", "enquo : function (arg)  "],
    ["enquos(", "enquos : function (..., .named = FALSE, .ignore_empty = c('trailing', 'none', 'all'), .unquote_names = TRUE, .homonyms = c('keep', 'first', 'last', 'error'), .check_assign = FALSE)  "],
    ["ensym(", "ensym : function (arg)  "],
    ["ensyms(", "ensyms : function (..., .named = FALSE, .ignore_empty = c('trailing', 'none', 'all'), .unquote_names = TRUE, .homonyms = c('keep', 'first', 'last', 'error'), .check_assign = FALSE)  "],
    ["expand_limits(", "expand_limits : function (...)  "],
    ["expand_scale(", "expand_scale : function (mult = 0, add = 0)  "],
    ["expr(", "expr : function (expr)  "],
    ["facet_grid(", "facet_grid : function (rows = NULL, cols = NULL, scales = 'fixed', space = 'fixed', shrink = TRUE, labeller = 'label_value', as.table = TRUE, switch = NULL, drop = TRUE, margins = FALSE, facets = NULL)  "],
    ["facet_null(", "facet_null : function (shrink = TRUE)  "],
    ["facet_wrap(", "facet_wrap : function (facets, nrow = NULL, ncol = NULL, scales = 'fixed', shrink = TRUE, labeller = 'label_value', as.table = TRUE, switch = NULL, drop = TRUE, dir = 'h', strip.position = 'top')  "],
    ["find_panel(", "find_panel : function (table)  "],
    ["fortify(", "fortify : function (model, data, ...)  "],
    ["geom_abline(", "geom_abline : function (mapping = NULL, data = NULL, ..., slope, intercept, na.rm = FALSE, show.legend = NA)  "],
    ["geom_area(", "geom_area : function (mapping = NULL, data = NULL, stat = 'identity', position = 'stack', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)  "],
    ["geom_bar(", "geom_bar : function (mapping = NULL, data = NULL, stat = 'count', position = 'stack', ..., width = NULL, binwidth = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_bin2d(", "geom_bin2d : function (mapping = NULL, data = NULL, stat = 'bin2d', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_blank(", "geom_blank : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_boxplot(", "geom_boxplot : function (mapping = NULL, data = NULL, stat = 'boxplot', position = 'dodge2', ..., outlier.colour = NULL, outlier.color = NULL, outlier.fill = NULL, outlier.shape = 19, outlier.size = 1.5, outlier.stroke = 0.5, outlier.alpha = NULL, notch = FALSE, notchwidth = 0.5, varwidth = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_col(", "geom_col : function (mapping = NULL, data = NULL, position = 'stack', ..., width = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_contour(", "geom_contour : function (mapping = NULL, data = NULL, stat = 'contour', position = 'identity', ..., lineend = 'butt', linejoin = 'round', linemitre = 10, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_count(", "geom_count : function (mapping = NULL, data = NULL, stat = 'sum', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_crossbar(", "geom_crossbar : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., fatten = 2.5, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_curve(", "geom_curve : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., curvature = 0.5, angle = 90, ncp = 5, arrow = NULL, arrow.fill = NULL, lineend = 'butt', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_density(", "geom_density : function (mapping = NULL, data = NULL, stat = 'density', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_density_2d(", "geom_density_2d : function (mapping = NULL, data = NULL, stat = 'density2d', position = 'identity', ..., lineend = 'butt', linejoin = 'round', linemitre = 10, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_density2d(", "geom_density2d : function (mapping = NULL, data = NULL, stat = 'density2d', position = 'identity', ..., lineend = 'butt', linejoin = 'round', linemitre = 10, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_dotplot(", "geom_dotplot : function (mapping = NULL, data = NULL, position = 'identity', ..., binwidth = NULL, binaxis = 'x', method = 'dotdensity', binpositions = 'bygroup', stackdir = 'up', stackratio = 1, dotsize = 1, stackgroups = FALSE, origin = NULL, right = TRUE, width = 0.9, drop = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_errorbar(", "geom_errorbar : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_errorbarh(", "geom_errorbarh : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_freqpoly(", "geom_freqpoly : function (mapping = NULL, data = NULL, stat = 'bin', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_hex(", "geom_hex : function (mapping = NULL, data = NULL, stat = 'binhex', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_histogram(", "geom_histogram : function (mapping = NULL, data = NULL, stat = 'bin', position = 'stack', ..., binwidth = NULL, bins = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_hline(", "geom_hline : function (mapping = NULL, data = NULL, ..., yintercept, na.rm = FALSE, show.legend = NA)  "],
    ["geom_jitter(", "geom_jitter : function (mapping = NULL, data = NULL, stat = 'identity', position = 'jitter', ..., width = NULL, height = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_label(", "geom_label : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., parse = FALSE, nudge_x = 0, nudge_y = 0, label.padding = unit(0.25, 'lines'), label.r = unit(0.15, 'lines'), label.size = 0.25, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_line(", "geom_line : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)  "],
    ["geom_linerange(", "geom_linerange : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_map(", "geom_map : function (mapping = NULL, data = NULL, stat = 'identity', ..., map, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_path(", "geom_path : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., lineend = 'butt', linejoin = 'round', linemitre = 10, arrow = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_point(", "geom_point : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_pointrange(", "geom_pointrange : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., fatten = 4, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_polygon(", "geom_polygon : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_qq(", "geom_qq : function (mapping = NULL, data = NULL, geom = 'point', position = 'identity', ..., distribution = stats::qnorm, dparams = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_qq_line(", "geom_qq_line : function (mapping = NULL, data = NULL, geom = 'path', position = 'identity', ..., distribution = stats::qnorm, dparams = list(), line.p = c(0.25, 0.75), fullrange = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_quantile(", "geom_quantile : function (mapping = NULL, data = NULL, stat = 'quantile', position = 'identity', ..., lineend = 'butt', linejoin = 'round', linemitre = 10, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_raster(", "geom_raster : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., hjust = 0.5, vjust = 0.5, interpolate = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_rect(", "geom_rect : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_ribbon(", "geom_ribbon : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_rug(", "geom_rug : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., sides = 'bl', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_segment(", "geom_segment : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., arrow = NULL, arrow.fill = NULL, lineend = 'butt', linejoin = 'round', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_sf(", "geom_sf : function (mapping = aes(), data = NULL, stat = 'sf', position = 'identity', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)  "],
    ["geom_sf_label(", "geom_sf_label : function (mapping = aes(), data = NULL, stat = 'sf_coordinates', position = 'identity', ..., parse = FALSE, nudge_x = 0, nudge_y = 0, label.padding = unit(0.25, 'lines'), label.r = unit(0.15, 'lines'), label.size = 0.25, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, fun.geometry = NULL)  "],
    ["geom_sf_text(", "geom_sf_text : function (mapping = aes(), data = NULL, stat = 'sf_coordinates', position = 'identity', ..., parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, fun.geometry = NULL)  "],
    ["geom_smooth(", "geom_smooth : function (mapping = NULL, data = NULL, stat = 'smooth', position = 'identity', ..., method = 'auto', formula = y ~ x, se = TRUE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_spoke(", "geom_spoke : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_step(", "geom_step : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', direction = 'hv', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)  "],
    ["geom_text(", "geom_text : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_tile(", "geom_tile : function (mapping = NULL, data = NULL, stat = 'identity', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_violin(", "geom_violin : function (mapping = NULL, data = NULL, stat = 'ydensity', position = 'dodge', ..., draw_quantiles = NULL, trim = TRUE, scale = 'area', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["geom_vline(", "geom_vline : function (mapping = NULL, data = NULL, ..., xintercept, na.rm = FALSE, show.legend = NA)  "],
    ["gg_dep(", "gg_dep : function (version, msg)  "],
    ["ggplot(", "ggplot : function (data = NULL, mapping = aes(), ..., environment = parent.frame())  "],
    ["ggplot_add(", "ggplot_add : function (object, plot, object_name)  "],
    ["ggplot_build(", "ggplot_build : function (plot)  "],
    ["ggplot_gtable(", "ggplot_gtable : function (data)  "],
    ["ggplotGrob(", "ggplotGrob : function (x)  "],
    ["ggproto(", "ggproto : function (`_class` = NULL, `_inherit` = NULL, ...)  "],
    ["ggproto_parent(", "ggproto_parent : function (parent, self)  "],
    ["ggsave(", "ggsave : function (filename, plot = last_plot(), device = NULL, path = NULL, scale = 1, width = NA, height = NA, units = c('in', 'cm', 'mm'), dpi = 300, limitsize = TRUE, ...)  "],
    ["ggtitle(", "ggtitle : function (label, subtitle = waiver())  "],
    ["guide_colorbar(", "guide_colorbar : function (title = waiver(), title.position = NULL, title.theme = NULL, title.hjust = NULL, title.vjust = NULL, label = TRUE, label.position = NULL, label.theme = NULL, label.hjust = NULL, label.vjust = NULL, barwidth = NULL, barheight = NULL, nbin = 20, raster = TRUE, frame.colour = NULL, frame.linewidth = 0.5, frame.linetype = 1, ticks = TRUE, ticks.colour = 'white', ticks.linewidth = 0.5, draw.ulim = TRUE, draw.llim = TRUE, direction = NULL, default.unit = 'line', reverse = FALSE, order = 0, available_aes = c('colour', "],
    ["guide_colourbar(", "guide_colourbar : function (title = waiver(), title.position = NULL, title.theme = NULL, title.hjust = NULL, title.vjust = NULL, label = TRUE, label.position = NULL, label.theme = NULL, label.hjust = NULL, label.vjust = NULL, barwidth = NULL, barheight = NULL, nbin = 20, raster = TRUE, frame.colour = NULL, frame.linewidth = 0.5, frame.linetype = 1, ticks = TRUE, ticks.colour = 'white', ticks.linewidth = 0.5, draw.ulim = TRUE, draw.llim = TRUE, direction = NULL, default.unit = 'line', reverse = FALSE, order = 0, available_aes = c('colour', "],
    ["guide_geom(", "guide_geom : function (guide, layers, default_mapping)  "],
    ["guide_merge(", "guide_merge : function (guide, new_guide)  "],
    ["guide_train(", "guide_train : function (guide, scale, aesthetic = NULL)  "],
    ["guides(", "guides : function (...)  "],
    ["is.Coord(", "is.Coord : function (x)  "],
    ["is.facet(", "is.facet : function (x)  "],
    ["is.ggplot(", "is.ggplot : function (x)  "],
    ["is.ggproto(", "is.ggproto : function (x)  "],
    ["is.theme(", "is.theme : function (x)  "],
    ["label_both(", "label_both : function (labels, multi_line = TRUE, sep = ': ')  "],
    ["label_bquote(", "label_bquote : function (rows = NULL, cols = NULL, default)  "],
    ["label_context(", "label_context : function (labels, multi_line = TRUE, sep = ': ')  "],
    ["label_parsed(", "label_parsed : function (labels, multi_line = TRUE)  "],
    ["label_value(", "label_value : function (labels, multi_line = TRUE)  "],
    ["label_wrap_gen(", "label_wrap_gen : function (width = 25, multi_line = TRUE)  "],
    ["labeller(", "labeller : function (..., .rows = NULL, .cols = NULL, keep.as.numeric = NULL, .multi_line = TRUE, .default = label_value)  "],
    ["labs(", "labs : function (..., title = waiver(), subtitle = waiver(), caption = waiver(), tag = waiver())  "],
    ["last_plot(", "last_plot : function ()  "],
    ["layer(", "layer : function (geom = NULL, stat = NULL, data = NULL, mapping = NULL, position = NULL, params = list(), inherit.aes = TRUE, check.aes = TRUE, check.param = TRUE, show.legend = NA)  "],
    ["layer_data(", "layer_data : function (plot, i = 1L)  "],
    ["layer_grob(", "layer_grob : function (plot, i = 1L)  "],
    ["layer_scales(", "layer_scales : function (plot, i = 1L, j = 1L)  "],
    ["lims(", "lims : function (...)  "],
    ["map_data(", "map_data : function (map, region = '.', exact = FALSE, ...)  "],
    ["margin(", "margin : function (t = 0, r = 0, b = 0, l = 0, unit = 'pt')  "],
    ["max_height(", "max_height : function (grobs, value_only = FALSE)  "],
    ["max_width(", "max_width : function (grobs, value_only = FALSE)  "],
    ["mean_cl_boot(", "mean_cl_boot : function (x, ...)  "],
    ["mean_cl_normal(", "mean_cl_normal : function (x, ...)  "],
    ["mean_sdl(", "mean_sdl : function (x, ...)  "],
    ["mean_se(", "mean_se : function (x, mult = 1)  "],
    ["median_hilow(", "median_hilow : function (x, ...)  "],
    ["merge_element(", "merge_element : function (new, old)  "],
    ["panel_cols(", "panel_cols : function (table)  "],
    ["panel_rows(", "panel_rows : function (table)  "],
    ["position_dodge(", "position_dodge : function (width = NULL, preserve = c('total', 'single'))  "],
    ["position_dodge2(", "position_dodge2 : function (width = NULL, preserve = c('total', 'single'), padding = 0.1, reverse = FALSE)  "],
    ["position_fill(", "position_fill : function (vjust = 1, reverse = FALSE)  "],
    ["position_identity(", "position_identity : function ()  "],
    ["position_jitter(", "position_jitter : function (width = NULL, height = NULL, seed = NA)  "],
    ["position_jitterdodge(", "position_jitterdodge : function (jitter.width = NULL, jitter.height = 0, dodge.width = 0.75, seed = NA)  "],
    ["position_nudge(", "position_nudge : function (x = 0, y = 0)  "],
    ["position_stack(", "position_stack : function (vjust = 1, reverse = FALSE)  "],
    ["qplot(", "qplot : function (x, y, ..., data, facets = NULL, margins = FALSE, geom = 'auto', xlim = c(NA, NA), ylim = c(NA, NA), log = '', main = NULL, xlab = NULL, ylab = NULL, asp = NA, stat = NULL, position = NULL)  "],
    ["quickplot(", "quickplot : function (x, y, ..., data, facets = NULL, margins = FALSE, geom = 'auto', xlim = c(NA, NA), ylim = c(NA, NA), log = '', main = NULL, xlab = NULL, ylab = NULL, asp = NA, stat = NULL, position = NULL)  "],
    ["quo(", "quo : function (expr)  "],
    ["quo_name(", "quo_name : function (quo)  "],
    ["quos(", "quos : function (..., .named = FALSE, .ignore_empty = c('trailing', 'none', 'all'), .unquote_names = TRUE)  "],
    ["rel(", "rel : function (x)  "],
    ["remove_missing(", "remove_missing : function (df, na.rm = FALSE, vars = names(df), name = '', finite = FALSE)  "],
    ["render_axes(", "render_axes : function (x = NULL, y = NULL, coord, theme, transpose = FALSE)  "],
    ["render_strips(", "render_strips : function (x = NULL, y = NULL, labeller, theme)  "],
    ["resolution(", "resolution : function (x, zero = TRUE)  "],
    ["scale_alpha(", "scale_alpha : function (..., range = c(0.1, 1))  "],
    ["scale_alpha_continuous(", "scale_alpha_continuous : function (..., range = c(0.1, 1))  "],
    ["scale_alpha_date(", "scale_alpha_date : function (..., range = c(0.1, 1))  "],
    ["scale_alpha_datetime(", "scale_alpha_datetime : function (..., range = c(0.1, 1))  "],
    ["scale_alpha_discrete(", "scale_alpha_discrete : function (...)  "],
    ["scale_alpha_identity(", "scale_alpha_identity : function (..., guide = 'none')  "],
    ["scale_alpha_manual(", "scale_alpha_manual : function (..., values)  "],
    ["scale_alpha_ordinal(", "scale_alpha_ordinal : function (..., range = c(0.1, 1))  "],
    ["scale_color_brewer(", "scale_color_brewer : function (..., type = 'seq', palette = 1, direction = 1, aesthetics = 'colour')  "],
    ["scale_color_continuous(", "scale_color_continuous : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_color_discrete(", "scale_color_discrete : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'colour')  "],
    ["scale_color_distiller(", "scale_color_distiller : function (..., type = 'seq', palette = 1, direction = -1, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_color_gradient(", "scale_color_gradient : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_color_gradient2(", "scale_color_gradient2 : function (..., low = muted('red'), mid = 'white', high = muted('blue'), midpoint = 0, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_color_gradientn(", "scale_color_gradientn : function (..., colours, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour', colors)  "],
    ["scale_color_grey(", "scale_color_grey : function (..., start = 0.2, end = 0.8, na.value = 'red', aesthetics = 'colour')  "],
    ["scale_color_hue(", "scale_color_hue : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'colour')  "],
    ["scale_color_identity(", "scale_color_identity : function (..., guide = 'none', aesthetics = 'colour')  "],
    ["scale_color_manual(", "scale_color_manual : function (..., values, aesthetics = 'colour')  "],
    ["scale_color_viridis_c(", "scale_color_viridis_c : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_color_viridis_d(", "scale_color_viridis_d : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', aesthetics = 'colour')  "],
    ["scale_colour_brewer(", "scale_colour_brewer : function (..., type = 'seq', palette = 1, direction = 1, aesthetics = 'colour')  "],
    ["scale_colour_continuous(", "scale_colour_continuous : function (..., type = getOption('ggplot2.continuous.colour', default = 'gradient'))  "],
    ["scale_colour_date(", "scale_colour_date : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar')  "],
    ["scale_colour_datetime(", "scale_colour_datetime : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar')  "],
    ["scale_colour_discrete(", "scale_colour_discrete : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'colour')  "],
    ["scale_colour_distiller(", "scale_colour_distiller : function (..., type = 'seq', palette = 1, direction = -1, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_colour_gradient(", "scale_colour_gradient : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_colour_gradient2(", "scale_colour_gradient2 : function (..., low = muted('red'), mid = 'white', high = muted('blue'), midpoint = 0, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_colour_gradientn(", "scale_colour_gradientn : function (..., colours, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour', colors)  "],
    ["scale_colour_grey(", "scale_colour_grey : function (..., start = 0.2, end = 0.8, na.value = 'red', aesthetics = 'colour')  "],
    ["scale_colour_hue(", "scale_colour_hue : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'colour')  "],
    ["scale_colour_identity(", "scale_colour_identity : function (..., guide = 'none', aesthetics = 'colour')  "],
    ["scale_colour_manual(", "scale_colour_manual : function (..., values, aesthetics = 'colour')  "],
    ["scale_colour_ordinal(", "scale_colour_ordinal : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', aesthetics = 'colour')  "],
    ["scale_colour_viridis_c(", "scale_colour_viridis_c : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'colour')  "],
    ["scale_colour_viridis_d(", "scale_colour_viridis_d : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', aesthetics = 'colour')  "],
    ["scale_continuous_identity(", "scale_continuous_identity : function (aesthetics, ..., guide = 'none')  "],
    ["scale_discrete_identity(", "scale_discrete_identity : function (aesthetics, ..., guide = 'none')  "],
    ["scale_discrete_manual(", "scale_discrete_manual : function (aesthetics, ..., values)  "],
    ["scale_fill_brewer(", "scale_fill_brewer : function (..., type = 'seq', palette = 1, direction = 1, aesthetics = 'fill')  "],
    ["scale_fill_continuous(", "scale_fill_continuous : function (..., type = getOption('ggplot2.continuous.fill', default = 'gradient'))  "],
    ["scale_fill_date(", "scale_fill_date : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar')  "],
    ["scale_fill_datetime(", "scale_fill_datetime : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar')  "],
    ["scale_fill_discrete(", "scale_fill_discrete : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'fill')  "],
    ["scale_fill_distiller(", "scale_fill_distiller : function (..., type = 'seq', palette = 1, direction = -1, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'fill')  "],
    ["scale_fill_gradient(", "scale_fill_gradient : function (..., low = '#132B43', high = '#56B1F7', space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'fill')  "],
    ["scale_fill_gradient2(", "scale_fill_gradient2 : function (..., low = muted('red'), mid = 'white', high = muted('blue'), midpoint = 0, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'fill')  "],
    ["scale_fill_gradientn(", "scale_fill_gradientn : function (..., colours, values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'fill', colors)  "],
    ["scale_fill_grey(", "scale_fill_grey : function (..., start = 0.2, end = 0.8, na.value = 'red', aesthetics = 'fill')  "],
    ["scale_fill_hue(", "scale_fill_hue : function (..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1, na.value = 'grey50', aesthetics = 'fill')  "],
    ["scale_fill_identity(", "scale_fill_identity : function (..., guide = 'none', aesthetics = 'fill')  "],
    ["scale_fill_manual(", "scale_fill_manual : function (..., values, aesthetics = 'fill')  "],
    ["scale_fill_ordinal(", "scale_fill_ordinal : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', aesthetics = 'fill')  "],
    ["scale_fill_viridis_c(", "scale_fill_viridis_c : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', values = NULL, space = 'Lab', na.value = 'grey50', guide = 'colourbar', aesthetics = 'fill')  "],
    ["scale_fill_viridis_d(", "scale_fill_viridis_d : function (..., alpha = 1, begin = 0, end = 1, direction = 1, option = 'D', aesthetics = 'fill')  "],
    ["scale_linetype(", "scale_linetype : function (..., na.value = 'blank')  "],
    ["scale_linetype_continuous(", "scale_linetype_continuous : function (...)  "],
    ["scale_linetype_discrete(", "scale_linetype_discrete : function (..., na.value = 'blank')  "],
    ["scale_linetype_identity(", "scale_linetype_identity : function (..., guide = 'none')  "],
    ["scale_linetype_manual(", "scale_linetype_manual : function (..., values)  "],
    ["scale_radius(", "scale_radius : function (name = waiver(), breaks = waiver(), labels = waiver(), limits = NULL, range = c(1, 6), trans = 'identity', guide = 'legend')  "],
    ["scale_shape(", "scale_shape : function (..., solid = TRUE)  "],
    ["scale_shape_continuous(", "scale_shape_continuous : function (...)  "],
    ["scale_shape_discrete(", "scale_shape_discrete : function (..., solid = TRUE)  "],
    ["scale_shape_identity(", "scale_shape_identity : function (..., guide = 'none')  "],
    ["scale_shape_manual(", "scale_shape_manual : function (..., values)  "],
    ["scale_shape_ordinal(", "scale_shape_ordinal : function (...)  "],
    ["scale_size(", "scale_size : function (name = waiver(), breaks = waiver(), labels = waiver(), limits = NULL, range = c(1, 6), trans = 'identity', guide = 'legend')  "],
    ["scale_size_area(", "scale_size_area : function (..., max_size = 6)  "],
    ["scale_size_continuous(", "scale_size_continuous : function (name = waiver(), breaks = waiver(), labels = waiver(), limits = NULL, range = c(1, 6), trans = 'identity', guide = 'legend')  "],
    ["scale_size_date(", "scale_size_date : function (..., range = c(1, 6))  "],
    ["scale_size_datetime(", "scale_size_datetime : function (..., range = c(1, 6))  "],
    ["scale_size_discrete(", "scale_size_discrete : function (...)  "],
    ["scale_size_identity(", "scale_size_identity : function (..., guide = 'none')  "],
    ["scale_size_manual(", "scale_size_manual : function (..., values)  "],
    ["scale_size_ordinal(", "scale_size_ordinal : function (..., range = c(2, 6))  "],
    ["scale_type(", "scale_type : function (x)  "],
    ["scale_x_continuous(", "scale_x_continuous : function (name = waiver(), breaks = waiver(), minor_breaks = waiver(), labels = waiver(), limits = NULL, expand = waiver(), oob = censor, na.value = NA_real_, trans = 'identity', position = 'bottom', sec.axis = waiver())  "],
    ["scale_x_date(", "scale_x_date : function (name = waiver(), breaks = waiver(), date_breaks = waiver(), labels = waiver(), date_labels = waiver(), minor_breaks = waiver(), date_minor_breaks = waiver(), limits = NULL, expand = waiver(), position = 'bottom', sec.axis = waiver())  "],
    ["scale_x_datetime(", "scale_x_datetime : function (name = waiver(), breaks = waiver(), date_breaks = waiver(), labels = waiver(), date_labels = waiver(), minor_breaks = waiver(), date_minor_breaks = waiver(), timezone = NULL, limits = NULL, expand = waiver(), position = 'bottom', sec.axis = waiver())  "],
    ["scale_x_discrete(", "scale_x_discrete : function (..., expand = waiver(), position = 'bottom')  "],
    ["scale_x_log10(", "scale_x_log10 : function (...)  "],
    ["scale_x_reverse(", "scale_x_reverse : function (...)  "],
    ["scale_x_sqrt(", "scale_x_sqrt : function (...)  "],
    ["scale_x_time(", "scale_x_time : function (name = waiver(), breaks = waiver(), minor_breaks = waiver(), labels = waiver(), limits = NULL, expand = waiver(), oob = censor, na.value = NA_real_, position = 'bottom', sec.axis = waiver())  "],
    ["scale_y_continuous(", "scale_y_continuous : function (name = waiver(), breaks = waiver(), minor_breaks = waiver(), labels = waiver(), limits = NULL, expand = waiver(), oob = censor, na.value = NA_real_, trans = 'identity', position = 'left', sec.axis = waiver())  "],
    ["scale_y_date(", "scale_y_date : function (name = waiver(), breaks = waiver(), date_breaks = waiver(), labels = waiver(), date_labels = waiver(), minor_breaks = waiver(), date_minor_breaks = waiver(), limits = NULL, expand = waiver(), position = 'left', sec.axis = waiver())  "],
    ["scale_y_datetime(", "scale_y_datetime : function (name = waiver(), breaks = waiver(), date_breaks = waiver(), labels = waiver(), date_labels = waiver(), minor_breaks = waiver(), date_minor_breaks = waiver(), timezone = NULL, limits = NULL, expand = waiver(), position = 'left', sec.axis = waiver())  "],
    ["scale_y_discrete(", "scale_y_discrete : function (..., expand = waiver(), position = 'left')  "],
    ["scale_y_log10(", "scale_y_log10 : function (...)  "],
    ["scale_y_reverse(", "scale_y_reverse : function (...)  "],
    ["scale_y_sqrt(", "scale_y_sqrt : function (...)  "],
    ["scale_y_time(", "scale_y_time : function (name = waiver(), breaks = waiver(), minor_breaks = waiver(), labels = waiver(), limits = NULL, expand = waiver(), oob = censor, na.value = NA_real_, position = 'left', sec.axis = waiver())  "],
    ["sec_axis(", "sec_axis : function (trans = NULL, name = waiver(), breaks = waiver(), labels = waiver())  "],
    ["set_last_plot(", "set_last_plot : function (value)  "],
    ["should_stop(", "should_stop : function (expr)  "],
    ["standardise_aes_names(", "standardise_aes_names : function (x)  "],
    ["stat(", "stat : function (x)  "],
    ["stat_bin(", "stat_bin : function (mapping = NULL, data = NULL, geom = 'bar', position = 'stack', ..., binwidth = NULL, bins = NULL, center = NULL, boundary = NULL, breaks = NULL, closed = c('right', 'left'), pad = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_bin_2d(", "stat_bin_2d : function (mapping = NULL, data = NULL, geom = 'tile', position = 'identity', ..., bins = 30, binwidth = NULL, drop = TRUE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_bin_hex(", "stat_bin_hex : function (mapping = NULL, data = NULL, geom = 'hex', position = 'identity', ..., bins = 30, binwidth = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_bin2d(", "stat_bin2d : function (mapping = NULL, data = NULL, geom = 'tile', position = 'identity', ..., bins = 30, binwidth = NULL, drop = TRUE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_binhex(", "stat_binhex : function (mapping = NULL, data = NULL, geom = 'hex', position = 'identity', ..., bins = 30, binwidth = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_boxplot(", "stat_boxplot : function (mapping = NULL, data = NULL, geom = 'boxplot', position = 'dodge2', ..., coef = 1.5, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_contour(", "stat_contour : function (mapping = NULL, data = NULL, geom = 'contour', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_count(", "stat_count : function (mapping = NULL, data = NULL, geom = 'bar', position = 'stack', ..., width = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_density(", "stat_density : function (mapping = NULL, data = NULL, geom = 'area', position = 'stack', ..., bw = 'nrd0', adjust = 1, kernel = 'gaussian', n = 512, trim = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_density_2d(", "stat_density_2d : function (mapping = NULL, data = NULL, geom = 'density_2d', position = 'identity', ..., contour = TRUE, n = 100, h = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_density2d(", "stat_density2d : function (mapping = NULL, data = NULL, geom = 'density_2d', position = 'identity', ..., contour = TRUE, n = 100, h = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_ecdf(", "stat_ecdf : function (mapping = NULL, data = NULL, geom = 'step', position = 'identity', ..., n = NULL, pad = TRUE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_ellipse(", "stat_ellipse : function (mapping = NULL, data = NULL, geom = 'path', position = 'identity', ..., type = 't', level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_function(", "stat_function : function (mapping = NULL, data = NULL, geom = 'path', position = 'identity', ..., fun, xlim = NULL, n = 101, args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_identity(", "stat_identity : function (mapping = NULL, data = NULL, geom = 'point', position = 'identity', ..., show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_qq(", "stat_qq : function (mapping = NULL, data = NULL, geom = 'point', position = 'identity', ..., distribution = stats::qnorm, dparams = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_qq_line(", "stat_qq_line : function (mapping = NULL, data = NULL, geom = 'path', position = 'identity', ..., distribution = stats::qnorm, dparams = list(), line.p = c(0.25, 0.75), fullrange = FALSE, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_quantile(", "stat_quantile : function (mapping = NULL, data = NULL, geom = 'quantile', position = 'identity', ..., quantiles = c(0.25, 0.5, 0.75), formula = NULL, method = 'rq', method.args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_sf(", "stat_sf : function (mapping = NULL, data = NULL, geom = 'rect', position = 'identity', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)  "],
    ["stat_sf_coordinates(", "stat_sf_coordinates : function (mapping = aes(), data = NULL, geom = 'point', position = 'identity', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, fun.geometry = NULL, ...)  "],
    ["stat_smooth(", "stat_smooth : function (mapping = NULL, data = NULL, geom = 'smooth', position = 'identity', ..., method = 'auto', formula = y ~ x, se = TRUE, n = 80, span = 0.75, fullrange = FALSE, level = 0.95, method.args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_spoke(", "stat_spoke : function (...)  "],
    ["stat_sum(", "stat_sum : function (mapping = NULL, data = NULL, geom = 'point', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_summary(", "stat_summary : function (mapping = NULL, data = NULL, geom = 'pointrange', position = 'identity', ..., fun.data = NULL, fun.y = NULL, fun.ymax = NULL, fun.ymin = NULL, fun.args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_summary_2d(", "stat_summary_2d : function (mapping = NULL, data = NULL, geom = 'tile', position = 'identity', ..., bins = 30, binwidth = NULL, drop = TRUE, fun = 'mean', fun.args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_summary_bin(", "stat_summary_bin : function (mapping = NULL, data = NULL, geom = 'pointrange', position = 'identity', ..., fun.data = NULL, fun.y = NULL, fun.ymax = NULL, fun.ymin = NULL, fun.args = list(), bins = 30, binwidth = NULL, breaks = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_summary_hex(", "stat_summary_hex : function (mapping = NULL, data = NULL, geom = 'hex', position = 'identity', ..., bins = 30, binwidth = NULL, drop = TRUE, fun = 'mean', fun.args = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_summary2d(", "stat_summary2d : function (...)  "],
    ["stat_unique(", "stat_unique : function (mapping = NULL, data = NULL, geom = 'point', position = 'identity', ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["stat_ydensity(", "stat_ydensity : function (mapping = NULL, data = NULL, geom = 'violin', position = 'dodge', ..., bw = 'nrd0', adjust = 1, kernel = 'gaussian', trim = TRUE, scale = 'area', na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)  "],
    ["summarise_coord(", "summarise_coord : function (p)  "],
    ["summarise_layers(", "summarise_layers : function (p)  "],
    ["summarise_layout(", "summarise_layout : function (p)  "],
    ["sym(", "sym : function (x)  "],
    ["syms(", "syms : function (x)  "],
    ["theme(", "theme : function (line, rect, text, title, aspect.ratio, axis.title, axis.title.x, axis.title.x.top, axis.title.x.bottom, axis.title.y, axis.title.y.left, axis.title.y.right, axis.text, axis.text.x, axis.text.x.top, axis.text.x.bottom, axis.text.y, axis.text.y.left, axis.text.y.right, axis.ticks, axis.ticks.x, axis.ticks.x.top, axis.ticks.x.bottom, axis.ticks.y, axis.ticks.y.left, axis.ticks.y.right, axis.ticks.length, axis.line, axis.line.x, axis.line.x.top, axis.line.x.bottom, axis.line.y, axis.line.y.left, "],
    ["theme_bw(", "theme_bw : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_classic(", "theme_classic : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_dark(", "theme_dark : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_grey(", "theme_grey : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_light(", "theme_light : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_linedraw(", "theme_linedraw : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_minimal(", "theme_minimal : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_replace(", "theme_replace : function (...)  "],
    ["theme_set(", "theme_set : function (new)  "],
    ["theme_test(", "theme_test : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["theme_update(", "theme_update : function (...)  "],
    ["theme_void(", "theme_void : function (base_size = 11, base_family = '', base_line_size = base_size/22, base_rect_size = base_size/22)  "],
    ["transform_position(", "transform_position : function (df, trans_x = NULL, trans_y = NULL, ...)  "],
    ["unit(", "unit : function (x, units, data = NULL)  "],
    ["update_geom_defaults(", "update_geom_defaults : function (geom, new)  "],
    ["update_labels(", "update_labels : function (p, labels)  "],
    ["update_stat_defaults(", "update_stat_defaults : function (stat, new)  "],
    ["vars(", "vars : function (...)  "],
    ["waiver(", "waiver : function ()  "],
    ["wrap_dims(", "wrap_dims : function (n, nrow = NULL, ncol = NULL)  "],
    ["xlab(", "xlab : function (label)  "],
    ["xlim(", "xlim : function (...)  "],
    ["ylab(", "ylab : function (label)  "],
    ["ylim(", "ylim : function (...)  "],
    ["zeroGrob(", "zeroGrob : function ()  "],
    ["%>%(", "%>% : function (lhs, rhs)  "],
    ["add_count(", "add_count : function (x, ..., wt = NULL, sort = FALSE, name = 'n')  "],
    ["add_count_(", "add_count_ : function (x, vars, wt = NULL, sort = FALSE)  "],
    ["add_row(", "add_row : function (.data, ..., .before = NULL, .after = NULL)  "],
    ["add_rownames(", "add_rownames : function (df, var = 'rowname')  "],
    ["add_tally(", "add_tally : function (x, wt, sort = FALSE, name = 'n')  "],
    ["add_tally_(", "add_tally_ : function (x, wt, sort = FALSE)  "],
    ["all_equal(", "all_equal : function (target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = FALSE, ...)  "],
    ["all_vars(", "all_vars : function (expr)  "],
    ["anti_join(", "anti_join : function (x, y, by = NULL, copy = FALSE, ...)  "],
    ["any_vars(", "any_vars : function (expr)  "],
    ["arrange(", "arrange : function (.data, ...)  "],
    ["arrange_(", "arrange_ : function (.data, ..., .dots = list())  "],
    ["arrange_all(", "arrange_all : function (.tbl, .funs = list(), ..., .by_group = FALSE)  "],
    ["arrange_at(", "arrange_at : function (.tbl, .vars, .funs = list(), ..., .by_group = FALSE)  "],
    ["arrange_if(", "arrange_if : function (.tbl, .predicate, .funs = list(), ..., .by_group = FALSE)  "],
    ["as_data_frame(", "as_data_frame : function (x, ...)  "],
    ["as_tibble(", "as_tibble : function (x, ..., .rows = NULL, .name_repair = c('check_unique', 'unique', 'universal', 'minimal'), rownames = pkgconfig::get_config('tibble::rownames', NULL))  "],
    ["as.tbl(", "as.tbl : function (x, ...)  "],
    ["as.tbl_cube(", "as.tbl_cube : function (x, ...)  "],
    ["auto_copy(", "auto_copy : function (x, y, copy = FALSE, ...)  "],
    ["bench_tbls(", "bench_tbls : function (tbls, op, ..., times = 10)  "],
    ["between(", "between : function (x, left, right)  "],
    ["bind_cols(", "bind_cols : function (...)  "],
    ["bind_rows(", "bind_rows : function (..., .id = NULL)  "],
    ["case_when(", "case_when : function (...)  "],
    ["changes(", "changes : function (x, y)  "],
    ["check_dbplyr(", "check_dbplyr : function ()  "],
    ["coalesce(", "coalesce : function (...)  "],
    ["collapse(", "collapse : function (x, ...)  "],
    ["collect(", "collect : function (x, ...)  "],
    ["combine(", "combine : function (...)  "],
    ["common_by(", "common_by : function (by = NULL, x, y)  "],
    ["compare_tbls(", "compare_tbls : function (tbls, op, ref = NULL, compare = equal_data_frame, ...)  "],
    ["compare_tbls2(", "compare_tbls2 : function (tbls_x, tbls_y, op, ref = NULL, compare = equal_data_frame, ...)  "],
    ["compute(", "compute : function (x, name = random_table_name(), ...)  "],
    ["contains(", "contains : function (match, ignore.case = TRUE, vars = peek_vars())  "],
    ["copy_to(", "copy_to : function (dest, df, name = deparse(substitute(df)), overwrite = FALSE, ...)  "],
    ["count(", "count : function (x, ..., wt = NULL, sort = FALSE, name = 'n', .drop = group_drops(x))  "],
    ["count_(", "count_ : function (x, vars, wt = NULL, sort = FALSE, .drop = group_drops(x))  "],
    ["cumall(", "cumall : function (x)  "],
    ["cumany(", "cumany : function (x)  "],
    ["cume_dist(", "cume_dist : function (x)  "],
    ["cummean(", "cummean : function (x)  "],
    ["current_vars(", "current_vars : function (...)  "],
    ["data_frame(", "data_frame : function (...)  "],
    ["data_frame_(", "data_frame_ : function (xs)  "],
    ["db_analyze(", "db_analyze : function (con, table, ...)  "],
    ["db_begin(", "db_begin : function (con, ...)  "],
    ["db_commit(", "db_commit : function (con, ...)  "],
    ["db_create_index(", "db_create_index : function (con, table, columns, name = NULL, unique = FALSE, ...)  "],
    ["db_create_indexes(", "db_create_indexes : function (con, table, indexes = NULL, unique = FALSE, ...)  "],
    ["db_create_table(", "db_create_table : function (con, table, types, temporary = FALSE, ...)  "],
    ["db_data_type(", "db_data_type : function (con, fields)  "],
    ["db_desc(", "db_desc : function (x)  "],
    ["db_drop_table(", "db_drop_table : function (con, table, force = FALSE, ...)  "],
    ["db_explain(", "db_explain : function (con, sql, ...)  "],
    ["db_has_table(", "db_has_table : function (con, table)  "],
    ["db_insert_into(", "db_insert_into : function (con, table, values, ...)  "],
    ["db_list_tables(", "db_list_tables : function (con)  "],
    ["db_query_fields(", "db_query_fields : function (con, sql, ...)  "],
    ["db_query_rows(", "db_query_rows : function (con, sql, ...)  "],
    ["db_rollback(", "db_rollback : function (con, ...)  "],
    ["db_save_query(", "db_save_query : function (con, sql, name, temporary = TRUE, ...)  "],
    ["db_write_table(", "db_write_table : function (con, table, types, values, temporary = FALSE, ...)  "],
    ["dense_rank(", "dense_rank : function (x)  "],
    ["desc(", "desc : function (x)  "],
    ["dim_desc(", "dim_desc : function (x)  "],
    ["distinct(", "distinct : function (.data, ..., .keep_all = FALSE)  "],
    ["distinct_(", "distinct_ : function (.data, ..., .dots, .keep_all = FALSE)  "],
    ["distinct_all(", "distinct_all : function (.tbl, .funs = list(), ...)  "],
    ["distinct_at(", "distinct_at : function (.tbl, .vars, .funs = list(), ...)  "],
    ["distinct_if(", "distinct_if : function (.tbl, .predicate, .funs = list(), ...)  "],
    ["distinct_prepare(", "distinct_prepare : function (.data, vars, group_vars = character(), .keep_all = FALSE)  "],
    ["do(", "do : function (.data, ...)  "],
    ["do_(", "do_ : function (.data, ..., .dots = list())  "],
    ["dr_dplyr(", "dr_dplyr : function ()  "],
    ["ends_with(", "ends_with : function (match, ignore.case = TRUE, vars = peek_vars())  "],
    ["eval_tbls(", "eval_tbls : function (tbls, op)  "],
    ["eval_tbls2(", "eval_tbls2 : function (tbls_x, tbls_y, op)  "],
    ["everything(", "everything : function (vars = peek_vars())  "],
    ["explain(", "explain : function (x, ...)  "],
    ["failwith(", "failwith : function (default = NULL, f, quiet = FALSE)  "],
    ["frame_data(", "frame_data : function (...)  "],
    ["full_join(", "full_join : function (x, y, by = NULL, copy = FALSE, suffix = c('.x', '.y'), ...)  "],
    ["funs(", "funs : function (..., .args = list())  "],
    ["funs_(", "funs_ : function (dots, args = list(), env = base_env())  "],
    ["group_by(", "group_by : function (.data, ..., add = FALSE, .drop = FALSE)  "],
    ["group_by_(", "group_by_ : function (.data, ..., .dots = list(), add = FALSE)  "],
    ["group_by_all(", "group_by_all : function (.tbl, .funs = list(), ..., .add = FALSE, .drop = group_drops(.tbl))  "],
    ["group_by_at(", "group_by_at : function (.tbl, .vars, .funs = list(), ..., .add = FALSE, .drop = group_drops(.tbl))  "],
    ["group_by_if(", "group_by_if : function (.tbl, .predicate, .funs = list(), ..., .add = FALSE, .drop = group_drops(.tbl))  "],
    ["group_by_prepare(", "group_by_prepare : function (.data, ..., .dots = list(), add = FALSE)  "],
    ["group_cols(", "group_cols : function (vars = peek_vars())  "],
    ["group_data(", "group_data : function (.data)  "],
    ["group_indices(", "group_indices : function (.data, ...)  "],
    ["group_indices_(", "group_indices_ : function (.data, ..., .dots = list())  "],
    ["group_keys(", "group_keys : function (.tbl, ...)  "],
    ["group_map(", "group_map : function (.tbl, .f, ...)  "],
    ["group_nest(", "group_nest : function (.tbl, ..., .key = 'data', keep = FALSE)  "],
    ["group_rows(", "group_rows : function (.data)  "],
    ["group_size(", "group_size : function (x)  "],
    ["group_split(", "group_split : function (.tbl, ..., keep = TRUE)  "],
    ["group_trim(", "group_trim : function (.tbl, .drop = group_drops(.tbl))  "],
    ["group_vars(", "group_vars : function (x)  "],
    ["group_walk(", "group_walk : function (.tbl, .f, ...)  "],
    ["grouped_df(", "grouped_df : function (data, vars, drop = FALSE)  "],
    ["groups(", "groups : function (x)  "],
    ["hybrid_call(", "hybrid_call : function (.data, expr)  "],
    ["id(", "id : function (.variables, drop = FALSE)  "],
    ["ident(", "ident : function (...)  "],
    ["if_else(", "if_else : function (condition, true, false, missing = NULL)  "],
    ["inner_join(", "inner_join : function (x, y, by = NULL, copy = FALSE, suffix = c('.x', '.y'), ...)  "],
    ["is_grouped_df(", "is_grouped_df : function (x)  "],
    ["is.grouped_df(", "is.grouped_df : function (x)  "],
    ["is.src(", "is.src : function (x)  "],
    ["is.tbl(", "is.tbl : function (x)  "],
    ["lag(", "lag : function (x, n = 1L, default = NA, order_by = NULL, ...)  "],
    ["last(", "last : function (x, order_by = NULL, default = default_missing(x))  "],
    ["last_col(", "last_col : function (offset = 0L, vars = peek_vars())  "],
    ["lead(", "lead : function (x, n = 1L, default = NA, order_by = NULL, ...)  "],
    ["left_join(", "left_join : function (x, y, by = NULL, copy = FALSE, suffix = c('.x', '.y'), ...)  "],
    ["location(", "location : function (df)  "],
    ["lst(", "lst : function (...)  "],
    ["lst_(", "lst_ : function (xs)  "],
    ["matches(", "matches : function (match, ignore.case = TRUE, vars = peek_vars())  "],
    ["min_rank(", "min_rank : function (x)  "],
    ["mutate(", "mutate : function (.data, ...)  "],
    ["mutate_(", "mutate_ : function (.data, ..., .dots = list())  "],
    ["mutate_all(", "mutate_all : function (.tbl, .funs, ...)  "],
    ["mutate_at(", "mutate_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  "],
    ["mutate_each(", "mutate_each : function (tbl, funs, ...)  "],
    ["mutate_each_(", "mutate_each_ : function (tbl, funs, vars)  "],
    ["mutate_if(", "mutate_if : function (.tbl, .predicate, .funs, ...)  "],
    ["n(", "n : function ()  "],
    ["n_distinct(", "n_distinct : function (..., na.rm = FALSE)  "],
    ["n_groups(", "n_groups : function (x)  "],
    ["na_if(", "na_if : function (x, y)  "],
    ["near(", "near : function (x, y, tol = .Machine$double.eps^0.5)  "],
    ["nest_join(", "nest_join : function (x, y, by = NULL, copy = FALSE, keep = FALSE, name = NULL, ...)  "],
    ["new_grouped_df(", "new_grouped_df : function (x, groups, ..., class = character())  "],
    ["nth(", "nth : function (x, n, order_by = NULL, default = default_missing(x))  "],
    ["ntile(", "ntile : function (x = row_number(), n)  "],
    ["num_range(", "num_range : function (prefix, range, width = NULL, vars = peek_vars())  "],
    ["one_of(", "one_of : function (..., .vars = peek_vars())  "],
    ["order_by(", "order_by : function (order_by, call)  "],
    ["percent_rank(", "percent_rank : function (x)  "],
    ["progress_estimated(", "progress_estimated : function (n, min_time = 0)  "],
    ["pull(", "pull : function (.data, var = -1)  "],
    ["rbind_all(", "rbind_all : function (x, id = NULL)  "],
    ["rbind_list(", "rbind_list : function (...)  "],
    ["recode(", "recode : function (.x, ..., .default = NULL, .missing = NULL)  "],
    ["recode_factor(", "recode_factor : function (.x, ..., .default = NULL, .missing = NULL, .ordered = FALSE)  "],
    ["rename(", "rename : function (.data, ...)  "],
    ["rename_(", "rename_ : function (.data, ..., .dots = list())  "],
    ["rename_all(", "rename_all : function (.tbl, .funs = list(), ...)  "],
    ["rename_at(", "rename_at : function (.tbl, .vars, .funs = list(), ...)  "],
    ["rename_if(", "rename_if : function (.tbl, .predicate, .funs = list(), ...)  "],
    ["rename_vars(", "rename_vars : function (vars = chr(), ..., strict = TRUE)  "],
    ["rename_vars_(", "rename_vars_ : function (vars, args)  "],
    ["right_join(", "right_join : function (x, y, by = NULL, copy = FALSE, suffix = c('.x', '.y'), ...)  "],
    ["row_number(", "row_number : function (x)  "],
    ["sample_n(", "sample_n : function (tbl, size, replace = FALSE, weight = NULL, .env = NULL, ...)  "],
    ["select(", "select : function (.data, ...)  "],
    ["select_(", "select_ : function (.data, ..., .dots = list())  "],
    ["select_all(", "select_all : function (.tbl, .funs = list(), ...)  "],
    ["select_at(", "select_at : function (.tbl, .vars, .funs = list(), ...)  "],
    ["select_if(", "select_if : function (.tbl, .predicate, .funs = list(), ...)  "],
    ["select_var(", "select_var : function (vars, var = -1)  "],
    ["select_vars(", "select_vars : function (vars = chr(), ..., include = chr(), exclude = chr())  "],
    ["select_vars_(", "select_vars_ : function (vars, args, include = chr(), exclude = chr())  "],
    ["semi_join(", "semi_join : function (x, y, by = NULL, copy = FALSE, ...)  "],
    ["show_query(", "show_query : function (x, ...)  "],
    ["slice(", "slice : function (.data, ..., .preserve = FALSE)  "],
    ["slice_(", "slice_ : function (.data, ..., .dots = list())  "],
    ["sql(", "sql : function (...)  "],
    ["sql_escape_ident(", "sql_escape_ident : function (con, x)  "],
    ["sql_escape_string(", "sql_escape_string : function (con, x)  "],
    ["sql_join(", "sql_join : function (con, x, y, vars, type = 'inner', by = NULL, ...)  "],
    ["sql_select(", "sql_select : function (con, select, from, where = NULL, group_by = NULL, having = NULL, order_by = NULL, limit = NULL, distinct = FALSE, ...)  "],
    ["sql_semi_join(", "sql_semi_join : function (con, x, y, anti = FALSE, by = NULL, ...)  "],
    ["sql_set_op(", "sql_set_op : function (con, x, y, method)  "],
    ["sql_subquery(", "sql_subquery : function (con, from, name = random_table_name(), ...)  "],
    ["sql_translate_env(", "sql_translate_env : function (con)  "],
    ["src(", "src : function (subclass, ...)  "],
    ["src_df(", "src_df : function (pkg = NULL, env = NULL)  "],
    ["src_local(", "src_local : function (tbl, pkg = NULL, env = NULL)  "],
    ["src_mysql(", "src_mysql : function (dbname, host = NULL, port = 0L, username = 'root', password = '', ...)  "],
    ["src_tbls(", "src_tbls : function (x)  "],
    ["starts_with(", "starts_with : function (match, ignore.case = TRUE, vars = peek_vars())  "],
    ["summarise(", "summarise : function (.data, ...)  "],
    ["summarise_(", "summarise_ : function (.data, ..., .dots = list())  "],
    ["summarise_all(", "summarise_all : function (.tbl, .funs, ...)  "],
    ["summarise_at(", "summarise_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  "],
    ["summarise_each(", "summarise_each : function (tbl, funs, ...)  "],
    ["summarise_each_(", "summarise_each_ : function (tbl, funs, vars)  "],
    ["summarise_if(", "summarise_if : function (.tbl, .predicate, .funs, ...)  "],
    ["summarize(", "summarize : function (.data, ...)  "],
    ["summarize_(", "summarize_ : function (.data, ..., .dots = list())  "],
    ["summarize_all(", "summarize_all : function (.tbl, .funs, ...)  "],
    ["summarize_at(", "summarize_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  "],
    ["summarize_each(", "summarize_each : function (tbl, funs, ...)  "],
    ["summarize_each_(", "summarize_each_ : function (tbl, funs, vars)  "],
    ["summarize_if(", "summarize_if : function (.tbl, .predicate, .funs, ...)  "],
    ["tally(", "tally : function (x, wt, sort = FALSE, name = 'n')  "],
    ["tally_(", "tally_ : function (x, wt, sort = FALSE)  "],
    ["tbl(", "tbl : function (src, ...)  "],
    ["tbl_cube(", "tbl_cube : function (dimensions, measures)  "],
    ["tbl_df(", "tbl_df : function (data)  "],
    ["tbl_nongroup_vars(", "tbl_nongroup_vars : function (x)  "],
    ["tbl_sum(", "tbl_sum : function (x)  "],
    ["tbl_vars(", "tbl_vars : function (x)  "],
    ["tibble(", "tibble : function (..., .rows = NULL, .name_repair = c('check_unique', 'unique', 'universal', 'minimal'))  "],
    ["top_n(", "top_n : function (x, n, wt)  "],
    ["transmute(", "transmute : function (.data, ...)  "],
    ["transmute_(", "transmute_ : function (.data, ..., .dots = list())  "],
    ["transmute_all(", "transmute_all : function (.tbl, .funs, ...)  "],
    ["transmute_at(", "transmute_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  "],
    ["transmute_if(", "transmute_if : function (.tbl, .predicate, .funs, ...)  "],
    ["tribble(", "tribble : function (...)  "],
    ["trunc_mat(", "trunc_mat : function (x, n = NULL, width = NULL, n_extra = NULL)  "],
    ["type_sum(", "type_sum : function (x)  "],
    ["validate_grouped_df(", "validate_grouped_df : function (x)  "],
    ["with_order(", "with_order : function (order_by, fun, x, ...)  "],
    ["wrap_dbplyr_obj(", "wrap_dbplyr_obj : function (obj_name)  "]
];